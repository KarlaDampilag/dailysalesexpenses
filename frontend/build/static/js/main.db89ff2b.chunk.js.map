{"version":3,"sources":["components/LogoutButton.tsx","components/Header.tsx","components/SignUp.tsx","components/Login.tsx","components/AddProductButton.tsx","components/UpdateProductButton.tsx","components/DeleteButton.tsx","components/withWindowDimenstions.tsx","components/configs.ts","services/main.ts","components/utils/index.tsx","components/Products.tsx","components/AddInventoryButton.tsx","components/UpdateInventoryButton.tsx","components/Inventories.tsx","components/AddCustomerButton.tsx","components/UpdateCustomerButton.tsx","components/Customers.tsx","components/AddSaleButton.tsx","components/UpdateSaleButton.tsx","components/SaleDetails.tsx","components/Sales.tsx","components/AddExpenseButton.tsx","components/UpdateExpenseButton.tsx","components/Expenses.tsx","components/Reports.tsx","components/RequestResetPassword.tsx","components/ResetPassword.tsx","components/ConfirmEmail.tsx","components/FeatureBug.tsx","components/CustomSpin.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["SIGN_OUT_MUTATION","gql","LogoutButton","history","useHistory","useMutation","refetchQueries","query","CURRENT_USER_QUERY","logout","onClick","push","Header","props","React","useState","selectedKey","setSelectedKey","mode","selectedKeys","e","key","toString","overflowedIndicator","MenuOutlined","className","Item","to","user","SIGNUP_MUTATION","SignUp","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","resultMessage","setResultMessage","variables","signup","loading","initialValues","remember","onFinish","a","message","error","then","catch","res","_","graphQLErrors","name","rules","required","prefix","MailOutlined","placeholder","onChange","target","value","LockOutlined","type","disabled","htmlType","href","LOGIN_MUTATION","Login","login","CREATE_PRODUCT_MUTATION","layout","labelCol","span","wrapperCol","tailLayout","offset","AddProductButton","setName","salePrice","setSalePrice","costPrice","setCostPrice","sku","setSKU","unit","setUnit","notes","setNotes","image","setImage","largeImage","setLargeImage","categories","setCategories","newCategories","setNewCategories","isShowingModal","setIsShowingModal","imageIsLoading","setImageIsLoading","options","category","Form","useForm","form","uploadFile","files","data","FormData","append","fetch","method","body","response","json","file","secure_url","eager","update","store","newData","createProduct","localStoreData","readQuery","PRODUCTS_BY_USER_QUERY","productsByUser","writeQuery","createProductLoading","CREATE_CATEGORIES_MUTATION","names","cache","payload","CATEGORIES_BY_USER_QUERY","categoriesByUser","createCategories","createCategoriesLoading","title","visible","onCancel","footer","length","resetFields","success","label","newCategoriesToSave","indexOf","option","Option","src","width","alt","style","size","icon","PlusOutlined","UPDATE_PRODUCT_MUTATION","UpdateProductButton","setSku","product","id","updateProduct","updateProductLoading","map","accept","aria-label","role","DeleteButton","okText","cancelText","onConfirm","onDelete","withWindowDimension","WrappedComponent","window","innerWidth","setWidth","updateDimensions","useEffect","addEventListener","removeEventListener","windowWidth","paginationConfig","defaultPageSize","showQuickJumper","showSizeChanger","position","calculateProfitBySale","sale","grossProfit","calculateGrossProfitBySaleItems","saleItems","subtotal","calculateSubtotalBySaleItems","discountNumber","discountValue","parseFloat","discountType","profit","saleItem","singleItemProfit","Number","toFixed","profitWithQuantity","quantity","total","calculateTotalBySale","taxNumber","taxValue","shippingNumber","shipping","taxType","calculateProfitByDateRange","allSalesByUser","startDateUnix","endDateUnix","filteredSales","timestamp","profitTotal","calculateExpensesByDateRange","allExpensesByUser","filteredExpenses","expense","expenseTotal","cost","calculateUnitsSoldByDateRange","unitsTotal","calculateProductUnitsBySale","getMonthlyProfitExpensesByDateRange","startDate","endDate","months","interim","clone","timeValues","format","moment","add","getAllMonthsOfDateRange","month","monthlyData","dateName","expenses","thisStartDayUnix","startOf","unix","thisLastDayUnix","endOf","getTopCustomersByDateRange","count","salesByCustomer","filter","customer","groupBy","saleByCustomer","entry","transactions","units","revenue","sales","revenueTotal","calculatedQuantityAndRevenuePerSale","returnObj","quantityTotal","thisRevenue","getQuantityAndRevenueTotalBySale","rawRevenue","calculatedProfit","sortedData","sortByProperty","b","propertyName","propertyOne","propertyTwo","returnValue","allowed","filteredObjA","filteredObjB","addressA","Object","values","join","addressB","localeCompare","getColumnSearchProps","filterDropdown","dropDownProps","setSelectedKeys","confirm","clearFilters","padding","onPressEnter","marginBottom","display","SearchOutlined","marginRight","filterIcon","filtered","color","undefined","onFilter","record","toLowerCase","includes","createdAt","filteredObj","formatNumber","number","multiplier","Math","pow","round","toLocaleString","DELETE_PRODUCT_MUTATION","productIdForDeletion","setProductIdForDeletion","useQuery","productsData","products","categoriesData","filteredItems","deleteProduct","ProductDetails","productDetailsProps","setIdForDeletion","onProductDelete","useCallback","info","expandableConfig","useMemo","expandedRowRender","expandIcon","expanded","onExpand","DownSquareTwoTone","fontSize","RightSquareTwoTone","userContext","Consumer","verified","bordered","dataSource","rowKey","expandable","pagination","columns","dataIndex","render","sorter","CREATE_INVENTORY_MUTATION","AddInventoryButton","createInventory","INVENTORIES_BY_USER_QUERY","inventoriesByUser","createIventoryLoading","UPDATE_INVENTORY_MUTATION","UpdateInventoryButton","inventory","updateInventory","updateInventoryLoading","defaultValue","DELETE_INVENTORY_MUTATION","Inventories","idForDeletion","inventoriesData","inventoriesLoading","inventories","deleteInventory","CREATE_CUSTOMER_MUTATION","AddCustomerButton","phone","setPhone","street1","setStreet1","street2","setStreet2","city","setCity","state","setState","zipCode","setZipCode","country","setCountry","createCustomer","CUSTOMERS_BY_USER_QUERY","customersByUser","createCustomerLoading","UPDATE_CUSTOMER_MUTATION","UpdateCustomerButton","updateCustomer","DELETE_CUSTOMER_MUTATION","Customers","customersData","customersLoading","customers","item","deleteCustomer","allowedForAddress","CustomerDetails","detailsProps","addressString","CREATE_SALE_MUTATION","AddSaleButton","modalIsVisible","setModalIsVisible","timeAdded","now","setSaleItems","customerId","setCustomerId","setTimestamp","setDiscountType","setDiscountValue","setTaxType","setTaxValue","setShipping","note","setNote","setTotal","rawSaleItems","duplicate","SALES_BY_USER_QUERY","dataCopy","cloneDeep","salesByUser","createSaleAndItems","createSaleLoading","saleItemIds","customersByUserData","labelAlign","forEach","allowClear","date","newSaleItems","maxWidth","JSON","stringify","parse","updatedSaleItems","updatedSaleItem","index","findIndex","splice","handleProductChange","min","handleQuantityChange","newSaleItem","summary","pageData","pageDataCopy","totalProfit","totalSubtotal","totalQuantity","each","valueToSet","UPDATE_SALE_MUTATION","UpdateSaleButton","cleanSaleItems","__typename","filteredSaleItems","setFilteredSaleItems","updateSaleAndItems","updateSaleLoading","SaleDetails","marginTop","DELETE_SALE_AND_ITEMS_MUTATION","Sales","fetchPolicy","salesData","reverse","deleteSaleAndItems","productsByUserData","onSaleDelete","rowClassName","productName","substring","concat","saleSubTotal","saleTotal","saleProfit","CREATE_EXPENSE_MUTATION","description","setDescription","setCost","createExpense","EXPENSES_BY_USER_QUERY","expensesByUser","UPDATE_EXPENSE_MUTATION","UpdateExpenseButton","updateExpense","DELETE_EXPENSE_MUTATION","deleteExpense","ExpenseDetails","expenseDetailsProps","onExpenseDelete","AddExpenseButton","totalCost","expensesData","setStartDate","setEndDate","topCustomersExpandableConfig","TopCustomerRowDetails","rowData","rowDetailsProps","calculatedProfitByDateRange","calculatedExpensesByDateRange","monthlyProfitExpensesByDateRange","topSellingProductsByDateRange","allSaleItemsByUser","saleItemsByProduct","saleItemByProduct","quantitySold","getTopSellingProductsByDateRange","topSellingCategoriesByDateRange","saleItemsByCategory","categoryName","saleItemByCategory","getTopSellingCategoriesByDateRange","topCustomersByDateRange","gutter","ResponsiveContainer","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","REQUEST_RESET_MUTATION","RequestResetPassword","requestReset","RESET_MUTATION","ResetPassword","newPassword","setNewPassword","resetToken","URLSearchParams","location","search","get","resetPassword","setTimeout","CONFIRM_MUTATION","confirmEmailToken","confirmEmail","runConfirmEmailMutation","ReactTypeformEmbed","require","FeatureBug","url","hideHeaders","opacity","CustomSpin","tip","Page404","createContext","permissions","withRouter","me","Provider","exact","path","component","Reports","Products","Expenses","ConfirmEmail","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","serverURL","process","httpLink","createHttpLink","uri","credentials","client","ApolloClient","link","InMemoryCache","addTypename","ReactGA","initialize","pageview","pathname","ReactDOM","document","getElementById","URL","origin","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db89ff2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'antd';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { CURRENT_USER_QUERY } from './App';\r\n\r\nconst SIGN_OUT_MUTATION = gql`\r\n    mutation logout {\r\n        logout\r\n    }\r\n`;\r\n\r\nconst LogoutButton = () => {\r\n    const history = useHistory();  // FIXME pass this down as react context!\r\n    const [logout] = useMutation(SIGN_OUT_MUTATION, {\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n    return (\r\n        <Button onClick={() => {\r\n            logout();\r\n            history.push(`/`);\r\n        }}>Logout</Button>\r\n    )\r\n}\r\nexport default LogoutButton;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu } from 'antd';\r\nimport { MenuOutlined } from '@ant-design/icons'\r\n\r\nimport LogoutButton from './LogoutButton';\r\n\r\ninterface PropTypes {\r\n    user: any // FIXME how to use GraphQL types on frontend?\r\n}\r\n\r\nconst Header = (props: PropTypes) => {\r\n    const [selectedKey, setSelectedKey] = React.useState<string>('');\r\n    return (\r\n        <div>\r\n            <Menu\r\n                mode='horizontal'\r\n                selectedKeys={[selectedKey]}\r\n                onClick={(e) => setSelectedKey(e.key.toString())}\r\n                overflowedIndicator={<MenuOutlined />}\r\n                className='app-menu'\r\n            >\r\n                <Menu.Item key='reports'><Link to=\"/\">Dashboard</Link></Menu.Item>\r\n                <Menu.Item key='products'><Link to=\"/products\">Products</Link></Menu.Item>\r\n                <Menu.Item key='sales'><Link to=\"/sales\">Sales</Link></Menu.Item>\r\n                <Menu.Item key='expenses'><Link to=\"/expenses\">Expenses</Link></Menu.Item>\r\n                {/*<Menu.Item key='inventories'><Link to=\"/inventories\">Inventories</Link></Menu.Item>*/}\r\n                <Menu.Item key='customers'><Link to=\"/customers\">Customers</Link></Menu.Item>\r\n                <Menu.Item key='typeform'><Link to=\"/typeform\">Request Feature / Report Bug</Link></Menu.Item>\r\n                <Menu.Item key='requestResetPassword'><Link to=\"/requestResetPassword\">Reset Password</Link></Menu.Item>\r\n                {props.user && <Menu.Item><LogoutButton /></Menu.Item>}\r\n                {!props.user && <Menu.Item><Link to=\"/signup\">Sign Up</Link></Menu.Item>}\r\n                {!props.user && <Menu.Item><Link to=\"/login\">Log In</Link></Menu.Item>}\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nimport { CURRENT_USER_QUERY } from './App';\r\n\r\nconst SIGNUP_MUTATION = gql`\r\n    mutation signup($email: String!, $password: String!, $confirmPassword: String!) {\r\n        signup(email: $email, password: $password, confirmPassword: $confirmPassword) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst SignUp = () => {\r\n    const [email, setEmail] = React.useState<string>();\r\n    const [password, setPassword] = React.useState<string>();\r\n    const [confirmPassword, setConfirmPassword] = React.useState<string>();\r\n    const [resultMessage, setResultMessage] = React.useState<string>();\r\n\r\n    const [signup, { loading }] = useMutation(SIGNUP_MUTATION, {\r\n        variables: { email, password, confirmPassword },\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n    return (\r\n        <div className='retain-margin'>\r\n            {resultMessage ? <p>{resultMessage}</p> :\r\n                <Form\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={async () => {\r\n                        if (password !== confirmPassword) {\r\n                            message.error('Passwords did not match');\r\n                        } else {\r\n                            await signup()\r\n                                .then(() => {\r\n                                    setResultMessage(`Please check your email ${email} and click on the link to verify your account.`);\r\n                                })\r\n                                .catch(res => {\r\n                                    _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                                });\r\n                        }\r\n                    }}\r\n                >\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        rules={[{ required: true, message: 'Please input your email' }]}\r\n                    >\r\n                        <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} placeholder=\"E-mail\" onChange={(e) => setEmail(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: 'Please input your password' }]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"confirmPassword\"\r\n                        rules={[{ required: true, message: 'Please input your password' }]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button disabled={loading} loading={loading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">{loading ? \"Signing Up\" : \"Sign Up\"}</Button>\r\n                        <div>Have an account? <a href=\"login\">Log In</a></div>\r\n                    </Form.Item>\r\n                </Form>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default SignUp;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { CURRENT_USER_QUERY } from './App';\r\n\r\nconst LOGIN_MUTATION = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst Login = () => {\r\n    const history = useHistory();  // FIXME pass this down as react context!\r\n    const [email, setEmail] = React.useState<string>();\r\n    const [password, setPassword] = React.useState<string>();\r\n\r\n    const [login, { loading }] = useMutation(LOGIN_MUTATION, {\r\n        variables: { email, password },\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n    return (\r\n        <div className='retain-margin'>\r\n            <Form\r\n                initialValues={{ remember: true }}\r\n                onFinish={async () => {\r\n                    await login()\r\n                        .then(() => {\r\n                            history.push('/');\r\n                        })\r\n                        .catch(res => {\r\n                            _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                        });\r\n                }}\r\n            >\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: true, message: 'Please input your email' }]}\r\n                >\r\n                    <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} placeholder=\"E-mail\" onChange={(e) => setEmail(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password' }]}\r\n                >\r\n                    <Input\r\n                        prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button disabled={loading} loading={loading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Log In</Button>\r\n                    <div>Don't have an account? <a href=\"signup\">Register</a></div>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\nexport default Login;","import * as _ from 'lodash';\r\nimport React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Modal, Button, Input, Form, Select, Spin, message } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { PRODUCTS_BY_USER_QUERY, CATEGORIES_BY_USER_QUERY, CREATE_CATEGORIES_MUTATION } from './Products';\r\n\r\ninterface PropTypes {\r\n    categories: any; // FIXME how to use GraphQL types on frontend?\r\n}\r\n\r\nconst CREATE_PRODUCT_MUTATION = gql`\r\nmutation CREATE_PRODUCT_MUTATION(\r\n    $name: String!\r\n    $salePrice: String!\r\n    $costPrice: String\r\n    $sku: String\r\n    $unit: String\r\n    $notes: String\r\n    $image: String\r\n    $largeImage: String\r\n    $categories: [String!]\r\n) {\r\n    createProduct(\r\n        name: $name\r\n        salePrice: $salePrice\r\n        costPrice: $costPrice\r\n        sku: $sku\r\n        unit: $unit\r\n        notes: $notes\r\n        image: $image\r\n        largeImage: $largeImage\r\n        categories: $categories\r\n    ) {\r\n        id\r\n        name\r\n        salePrice\r\n        costPrice\r\n        unit\r\n        sku\r\n        categories\r\n        notes\r\n        image\r\n        largeImage  \r\n        createdAt\r\n    }\r\n}\r\n`;\r\n\r\nconst AddProductButton = (props: PropTypes) => {\r\n    const [name, setName] = React.useState<string>();\r\n    const [salePrice, setSalePrice] = React.useState<string>();\r\n    const [costPrice, setCostPrice] = React.useState<string>();\r\n    const [sku, setSKU] = React.useState<string>();\r\n    const [unit, setUnit] = React.useState<string>();\r\n    const [notes, setNotes] = React.useState<string>();\r\n    const [image, setImage] = React.useState<string | null>(null);\r\n    const [largeImage, setLargeImage] = React.useState<string | null>(null);\r\n    const [categories, setCategories] = React.useState<string[]>([]);\r\n    const [newCategories, setNewCategories] = React.useState<string[]>([]);\r\n    const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n    const [imageIsLoading, setImageIsLoading] = React.useState<boolean>(false);\r\n\r\n    let options: string[] = [];\r\n    if (props.categories) {\r\n        options = _.map(props.categories, category => category.name);\r\n    }\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const uploadFile = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files ? e.target.files : [];\r\n        const data = new FormData();\r\n        data.append('file', files[0]);\r\n        data.append('upload_preset', 'sickfits'); // needed by Cloudinary\r\n\r\n        setImageIsLoading(true);\r\n        const response = await fetch('https://api.cloudinary.com/v1_1/dlki0o7xf/image/upload', {\r\n            method: 'POST',\r\n            body: data\r\n        });\r\n\r\n        const file = await response.json();\r\n        if (file && file.secure_url && file.eager) {\r\n            setImage(file.secure_url);\r\n            setLargeImage(file.eager[0].secure_url);\r\n        } else {\r\n            setImage(null);\r\n            setLargeImage(null);\r\n        }\r\n        setImageIsLoading(false);\r\n    }\r\n\r\n    const [createProduct, { loading: createProductLoading }] = useMutation(CREATE_PRODUCT_MUTATION, {\r\n        variables: { name, salePrice, costPrice, sku, unit, notes, image, largeImage, categories },\r\n        update: (store, response) => {\r\n            let newData = response.data.createProduct;\r\n            let localStoreData: any = store.readQuery({ query: PRODUCTS_BY_USER_QUERY });\r\n            localStoreData = { productsByUser: [...localStoreData.productsByUser, newData] };\r\n            store.writeQuery({ query: PRODUCTS_BY_USER_QUERY, data: localStoreData });\r\n        }\r\n    });\r\n\r\n    const [createCategories, { loading: createCategoriesLoading }] = useMutation(CREATE_CATEGORIES_MUTATION, {\r\n        variables: { names: newCategories },\r\n        update: (cache, payload) => {\r\n            // Read cache for the categories\r\n            const data: any = cache.readQuery({ query: CATEGORIES_BY_USER_QUERY });\r\n\r\n            // Add the new categories\r\n            data.categoriesByUser = [...data.categoriesByUser, ...payload.data.createCategories];\r\n\r\n            // Put the updated categories back in the cache\r\n            cache.writeQuery({ query: CATEGORIES_BY_USER_QUERY, data })\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Modal title='Add a Product' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n                <Form {...layout} form={form} onFinish={async () => {\r\n                    if (newCategories && newCategories.length > 0) {\r\n                        await createCategories()\r\n                            .catch(res => {\r\n                                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                            });\r\n                    }\r\n\r\n                    await createProduct()\r\n                        .then(() => {\r\n                            setIsShowingModal(false);\r\n                            form.resetFields();\r\n                            setImage(null);\r\n                            message.success('Product added');\r\n                        })\r\n                        .catch(res => {\r\n                            _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                        });\r\n                }}>\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <Input value={name} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Sale Price\"\r\n                        name=\"salePrice\"\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <Input type='number' onChange={e => setSalePrice(e.target.value.toString())} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Cost Price\"\r\n                        name=\"costPrice\"\r\n                    >\r\n                        <Input type='number' onChange={e => setCostPrice(e.target.value.toString())} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"SKU\"\r\n                        name=\"sku\"\r\n                    >\r\n                        <Input value={sku} onChange={e => setSKU(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Unit\"\r\n                        name=\"unit\"\r\n                    >\r\n                        <Input value={unit} onChange={e => setUnit(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Categories\"\r\n                        name=\"categories\"\r\n                    >\r\n                        <Select\r\n                            value={categories}\r\n                            mode='tags'\r\n                            placeholder='Start typing to add...'\r\n                            onChange={value => {\r\n                                setCategories(value);\r\n                                const newCategoriesToSave = _.filter(value, category => options.indexOf(category) < 0);\r\n                                setNewCategories(newCategoriesToSave);\r\n                            }}\r\n                        >\r\n                            {\r\n                                _.map(options, (option, key) => (\r\n                                    <Select.Option value={option} key={key}>{option}</Select.Option>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Notes\"\r\n                        name=\"notes\"\r\n                    >\r\n                        <Input value={notes} onChange={e => setNotes(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Image\"\r\n                        name=\"image\"\r\n                    >\r\n                        <Input type='file' placeholder='Upload an image' onChange={uploadFile} />\r\n                        {imageIsLoading && <Spin />}\r\n                        {image && <img src={image} width='200' alt='upload preview' />}\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={createProductLoading || createCategoriesLoading} style={{ width: '100%' }}>Add{createProductLoading || createCategoriesLoading ? 'ing ' : ' '} Product</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button\r\n                onClick={() => setIsShowingModal(true)}\r\n                size='large'\r\n                icon={<PlusOutlined />}\r\n                className='add-button btn-add-margin-left'\r\n            >\r\n                <span className='no-550'>Add Product</span>\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 0, span: 24 },\r\n};\r\n\r\nexport default AddProductButton;\r\nexport { layout, tailLayout, CATEGORIES_BY_USER_QUERY, CREATE_CATEGORIES_MUTATION };","import * as _ from 'lodash';\r\nimport React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Button, Input, Form, Spin, Select, Modal, message } from 'antd';\r\n\r\nimport { layout, tailLayout } from './AddProductButton';\r\nimport { CREATE_CATEGORIES_MUTATION } from './AddProductButton';\r\nimport { PRODUCTS_BY_USER_QUERY } from './Products';\r\n\r\ninterface PropTypes {\r\n  product: any; // FIXME how to use GraphQL types on frontend?\r\n  categories: any[];\r\n}\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n    mutation UPDATE_PRODUCT_MUTATION(\r\n        $id: ID!\r\n        $name: String\r\n        $salePrice: String\r\n        $costPrice: String\r\n        $sku: String\r\n        $unit: String\r\n        $notes: String\r\n        $image: String\r\n        $largeImage: String\r\n        $categories: [String!]\r\n    ) {\r\n        updateProduct(\r\n            id: $id\r\n            name: $name\r\n            salePrice: $salePrice\r\n            costPrice: $costPrice\r\n            sku: $sku\r\n            unit: $unit\r\n            notes: $notes\r\n            image: $image\r\n            largeImage: $largeImage\r\n            categories: $categories\r\n        ) {\r\n            id\r\n            name\r\n            salePrice\r\n            costPrice\r\n            unit\r\n            sku\r\n            categories\r\n            notes\r\n            image\r\n            largeImage\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst UpdateProductButton = (props: PropTypes) => {\r\n  const [name, setName] = React.useState<string>();\r\n  const [salePrice, setSalePrice] = React.useState<string>();\r\n  const [costPrice, setCostPrice] = React.useState<string>();\r\n  const [sku, setSku] = React.useState<string>();\r\n  const [unit, setUnit] = React.useState<string>();\r\n  const [notes, setNotes] = React.useState<string>();\r\n  const [image, setImage] = React.useState<string | null>(null);\r\n  const [largeImage, setLargeImage] = React.useState<string | null>(null);\r\n  const [categories, setCategories] = React.useState<string[]>(props.product.categories);\r\n  const [newCategories, setNewCategories] = React.useState<string[]>([]);\r\n  const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n  const [imageIsLoading, setImageIsLoading] = React.useState<boolean>(false);\r\n\r\n  let options: string[] = [];\r\n  if (props.categories) {\r\n    options = _.map(props.categories, category => category.name);\r\n  }\r\n\r\n  const [updateProduct, { loading: updateProductLoading }] = useMutation(UPDATE_PRODUCT_MUTATION, {\r\n    variables: { id: props.product.id, name, salePrice, costPrice, sku, unit, notes, image, largeImage, categories },\r\n    refetchQueries: [{ query: PRODUCTS_BY_USER_QUERY }]\r\n  });\r\n\r\n  const [createCategories] = useMutation(CREATE_CATEGORIES_MUTATION, {\r\n    variables: { names: newCategories }\r\n  });\r\n\r\n  const uploadFile = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files ? e.target.files : [];\r\n    const data = new FormData();\r\n    data.append('file', files[0]);\r\n    data.append('upload_preset', 'sickfits'); // needed by Cloudinary\r\n\r\n    setImageIsLoading(true);\r\n    const response = await fetch('https://api.cloudinary.com/v1_1/dlki0o7xf/image/upload', {\r\n      method: 'POST',\r\n      body: data\r\n    });\r\n\r\n    const file = await response.json();\r\n    if (file && file.secure_url && file.eager) {\r\n      setImage(file.secure_url);\r\n      setLargeImage(file.eager[0].secure_url);\r\n    } else {\r\n      setImage(null);\r\n      setLargeImage(null);\r\n    }\r\n    setImageIsLoading(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal title='Update Product' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n        <Form\r\n          {...layout}\r\n          initialValues={{\r\n            name: props.product.name,\r\n            salePrice: props.product.salePrice,\r\n            costPrice: props.product.costPrice,\r\n            sku: props.product.sku,\r\n            unit: props.product.unit,\r\n            notes: props.product.notes\r\n          }}\r\n          onFinish={async e => {\r\n            if (newCategories && newCategories.length > 0) {\r\n              await createCategories()\r\n                .catch(res => {\r\n                  _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                  message.error('Error: cannot update. Please contact SourceCodeXL.');\r\n                });\r\n            }\r\n            if (!image) {\r\n              setImage(props.product.image);\r\n            }\r\n\r\n            await updateProduct()\r\n              .then(() => {\r\n                message.success('Product updated');\r\n                setIsShowingModal(false);\r\n              })\r\n              .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot update. Please contact SourceCodeXL.');\r\n              });\r\n\r\n          }}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n          >\r\n            <Input onChange={e => setName(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Sale Price\"\r\n            name=\"salePrice\"\r\n          >\r\n            <Input type='number' onChange={e => setSalePrice(e.target.value.toString())} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Cost Price\"\r\n            name=\"costPrice\"\r\n          >\r\n            <Input type='number' onChange={e => setCostPrice(e.target.value.toString())} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"SKU\"\r\n            name=\"sku\"\r\n          >\r\n            <Input onChange={e => setSku(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Unit\"\r\n            name=\"unit\"\r\n          >\r\n            <Input onChange={e => setUnit(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Categories\"\r\n          >\r\n            <Select mode='tags' value={categories} onChange={(value: any) => {\r\n              setCategories(value);\r\n              const newCategoriesToSave = _.filter(value, category => options.indexOf(category) < 0);\r\n              setNewCategories(newCategoriesToSave);\r\n            }}>\r\n              {\r\n                options.map((option, key) => (\r\n                  <Select.Option value={option} key={key}>{option}</Select.Option>\r\n                ))\r\n              }\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Notes\"\r\n            name=\"notes\"\r\n          >\r\n            <Input onChange={e => setNotes(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Image\"\r\n          >\r\n            <Input type='file' accept='image/png, image/jpeg' placeholder='Upload an image' onChange={uploadFile} />\r\n            {imageIsLoading && <Spin />}\r\n            {image ? <img src={image} width='200' alt='upload preview' />\r\n              : props.product.image && <img src={props.product.image} width='200' alt='current preview' />}\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={imageIsLoading || updateProductLoading} loading={updateProductLoading} style={{ width: '100%' }}>Updat{updateProductLoading ? 'ing' : 'e'} Product</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n      <Button onClick={() => setIsShowingModal(true)}><span aria-label='edit' role='img'>✏️</span></Button>\r\n    </>\r\n  )\r\n}\r\nexport default UpdateProductButton;","import React from 'react';\r\nimport { Popconfirm, Button } from 'antd';\r\n\r\ninterface PropTypes {\r\n    onDelete: () => void;\r\n    onClick: () => void;\r\n    className?: string;\r\n}\r\nconst DeleteButton = (props: PropTypes) => {\r\n    return (\r\n        <Popconfirm\r\n            title=\"Are you sure to delete? This action is irreversible!\"\r\n            okText=\"Delete\"\r\n            cancelText=\"Cancel\"\r\n            onConfirm={props.onDelete}\r\n        >\r\n            <Button onClick={props.onClick} className={props.className}><span aria-label='delete' role='img'>❌</span></Button>\r\n        </Popconfirm>\r\n    )\r\n}\r\nexport default DeleteButton;","import React from 'react';\r\n\r\nconst withWindowDimension = (WrappedComponent: React.ComponentType<any>) => (props: any) => {\r\n    const [width, setWidth] = React.useState<number>(window.innerWidth);\r\n\r\n    const updateDimensions = () => {\r\n        setWidth(window.innerWidth);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"resize\", updateDimensions);\r\n        return () => window.removeEventListener(\"resize\", updateDimensions);\r\n    }, []);\r\n\r\n    return (\r\n        <WrappedComponent\r\n            {...props}\r\n            windowWidth={width}\r\n        />\r\n    );\r\n}\r\n\r\nexport default withWindowDimension;\r\n","export const paginationConfig = {\r\n    defaultPageSize: 10,\r\n    showQuickJumper: true,\r\n    showSizeChanger: true,\r\n    position: ['bottomLeft' as 'bottomLeft']\r\n};","import * as _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\ninterface SaleItemProps {\r\n    product: any; // FIXME how to use graphql types in frontend`\r\n    salePrice: string;\r\n    costPrice?: string;\r\n    quantity: number;\r\n} // FIXME how to make universal interfaces for the whole app?\r\n\r\nexport const calculateProfitBySale = (sale: any): number => {\r\n    const grossProfit = calculateGrossProfitBySaleItems(sale.saleItems);\r\n    const subtotal = calculateSubtotalBySaleItems(sale.saleItems);\r\n    let discountDeduction;\r\n    const discountNumber = sale.discountValue ? parseFloat(sale.discountValue) : 0;\r\n    if (sale.discountType === 'FLAT') {\r\n        discountDeduction = discountNumber;\r\n    } else {\r\n        discountDeduction = subtotal * (discountNumber / 100);\r\n    }\r\n    const netProfit = grossProfit - discountDeduction;\r\n    return netProfit;\r\n}\r\n\r\nexport const calculateGrossProfitBySaleItems = (saleItems: SaleItemProps[]): number => {\r\n    let profit: number = 0;\r\n    _.each(saleItems, saleItem => {\r\n        const salePrice = saleItem.salePrice ? parseFloat(saleItem.salePrice) : 0;\r\n        const costPrice = saleItem.costPrice ? parseFloat(saleItem.costPrice) : 0;\r\n        const singleItemProfit = parseFloat(Number(salePrice - costPrice).toFixed(3));\r\n        const profitWithQuantity = parseFloat(Number(singleItemProfit * saleItem.quantity).toFixed(3));\r\n        profit += profitWithQuantity;\r\n    });\r\n    return profit;\r\n}\r\n\r\nexport const calculateSubtotalBySaleItems: (saleItems: SaleItemProps[]) => number = (saleItems: SaleItemProps[]) => {\r\n    let total: number = 0;\r\n    _.each(saleItems, saleItem => {\r\n        const salePrice = saleItem.salePrice ? parseFloat(saleItem.salePrice) : 0;\r\n        total += salePrice * saleItem.quantity;\r\n    });\r\n    return total;\r\n}\r\n\r\n// FIXME use proper type not any\r\nexport const calculateTotalBySale = (sale: any): number => {\r\n    const subtotal = calculateSubtotalBySaleItems(sale.saleItems);\r\n    let total: number = subtotal;\r\n    let discountDeduction;\r\n    let taxAddition;\r\n    const discountNumber = sale.discountValue ? parseFloat(sale.discountValue) : 0;\r\n    const taxNumber = sale.taxValue ? parseFloat(sale.taxValue) : 0;\r\n    const shippingNumber = sale.shipping ? parseFloat(sale.shipping) : 0;\r\n    if (sale.discountType === 'FLAT') {\r\n        discountDeduction = discountNumber;\r\n    } else {\r\n        discountDeduction = subtotal * (discountNumber / 100);\r\n    }\r\n    total = total - discountDeduction;\r\n    if (sale.taxType === 'FLAT') {\r\n        taxAddition = taxNumber;\r\n    } else {\r\n        taxAddition = total * (taxNumber / 100);\r\n    }\r\n    total = total + taxAddition + shippingNumber;\r\n    return parseFloat(Number(total).toFixed(2));\r\n}\r\n\r\nconst calculateProductUnitsBySale = (sale: any): number => {\r\n    let unitsTotal: number = 0;\r\n    for (const saleItem of sale.saleItems) {\r\n        unitsTotal += saleItem.quantity;\r\n    }\r\n\r\n    return unitsTotal;\r\n}\r\n\r\n// FOR THE DASHBOARD\r\nexport const calculateProfitByDateRange = (allSalesByUser: any, startDateUnix: number, endDateUnix: number): number => {\r\n    const filteredSales = _.filter(allSalesByUser, sale => {\r\n        return sale.timestamp >= startDateUnix && sale.timestamp <= endDateUnix;\r\n    });\r\n    let profitTotal: number = 0;\r\n    _.forEach(filteredSales, sale => {\r\n        const profit = calculateProfitBySale(sale);\r\n        profitTotal += profit;\r\n    });\r\n    return profitTotal;\r\n}\r\n\r\nexport const calculateExpensesByDateRange = (allExpensesByUser: any, startDateUnix: number, endDateUnix: number): number => {\r\n    const filteredExpenses = _.filter(allExpensesByUser, expense => {\r\n        return expense.timestamp >= startDateUnix && expense.timestamp <= endDateUnix;\r\n    });\r\n\r\n    let expenseTotal: number = 0;\r\n    _.forEach(filteredExpenses, expense => {\r\n        expenseTotal += parseFloat(expense.cost);\r\n    });\r\n    return expenseTotal;\r\n}\r\n\r\nexport const calculateUnitsSoldByDateRange = (allSalesByUser: any, startDateUnix: number, endDateUnix: number): number => {\r\n    const filteredSales = _.filter(allSalesByUser, sale => {\r\n        return sale.timestamp >= startDateUnix && sale.timestamp <= endDateUnix;\r\n    });\r\n    let unitsTotal: number = 0;\r\n    _.forEach(filteredSales, sale => {\r\n        const profit = calculateProductUnitsBySale(sale);\r\n        unitsTotal += profit;\r\n    });\r\n    return unitsTotal;\r\n}\r\n\r\nconst getAllMonthsOfDateRange = (startDate: moment.Moment, endDate: moment.Moment): moment.Moment[] => {\r\n    let interim: moment.Moment = startDate.clone();\r\n    let timeValues: moment.Moment[] = [];\r\n    while (endDate > interim || interim.format('M') === endDate.format('M')) {\r\n        timeValues.push(moment(interim));\r\n        interim.add(1, 'month');\r\n    }\r\n    return timeValues;\r\n}\r\n\r\nexport interface SalesExpensesDataInterface {\r\n    dateName: string;\r\n    profit: number;\r\n    expenses: number;\r\n}\r\n\r\nexport const getMonthlyProfitExpensesByDateRange = (allSalesByUser: any, allExpensesByUser: any, startDate: moment.Moment, endDate: moment.Moment): SalesExpensesDataInterface[] => {\r\n    const months = getAllMonthsOfDateRange(startDate, endDate);\r\n    const data: SalesExpensesDataInterface[] = [];\r\n\r\n    _.forEach(months, month => {\r\n        const monthlyData: SalesExpensesDataInterface = {\r\n            dateName: month.format('MM-YYYY'),\r\n            profit: 0,\r\n            expenses: 0\r\n        };\r\n        const thisStartDayUnix = month.startOf('month').unix();\r\n        const thisLastDayUnix = month.endOf('month').unix();\r\n        monthlyData.profit = calculateProfitByDateRange(allSalesByUser, thisStartDayUnix, thisLastDayUnix)\r\n        monthlyData.expenses = calculateExpensesByDateRange(allExpensesByUser, thisStartDayUnix, thisLastDayUnix);\r\n        data.push(monthlyData);\r\n    });\r\n    return data;\r\n}\r\n\r\nexport interface TopSellingProductInterface {\r\n    product: any,\r\n    quantitySold: number,\r\n    revenue: number\r\n}\r\nexport const getTopSellingProductsByDateRange = (allSalesByUser: any, startDateUnix: number, endDateUnix: number, count?: number): TopSellingProductInterface[] => {\r\n    const filteredSales = _.filter(allSalesByUser, sale => {\r\n        return sale.timestamp >= startDateUnix && sale.timestamp <= endDateUnix;\r\n    });\r\n    let allSaleItemsByUser: any = [];\r\n\r\n    for (const sale of filteredSales) {\r\n        allSaleItemsByUser = [...allSaleItemsByUser, ...sale.saleItems];\r\n    }\r\n\r\n    const saleItemsByProduct = _.groupBy(allSaleItemsByUser, saleItem => {\r\n        return saleItem.product.id;\r\n    });\r\n\r\n    // get revenue per product\r\n    const data: TopSellingProductInterface[] = [];\r\n    _.forEach(saleItemsByProduct, (saleItemByProduct: any, id: string) => {\r\n        const entry: TopSellingProductInterface = {\r\n            product: null,\r\n            quantitySold: 0,\r\n            revenue: 0\r\n        };\r\n        const saleItems = saleItemsByProduct[id];\r\n        entry.product = saleItems[0].product;\r\n        let quantityTotal = 0;\r\n        let revenueTotal = 0;\r\n        _.forEach(saleItems, saleItem => {\r\n            quantityTotal += saleItem.quantity;\r\n            const rawRevenue = saleItem.quantity * saleItem.salePrice;\r\n            revenueTotal += (+rawRevenue.toFixed(2)); // add '+' at the beginning to return number instead of string\r\n        });\r\n        entry.quantitySold = quantityTotal;\r\n        entry.revenue = revenueTotal;\r\n        data.push(entry);\r\n    });\r\n\r\n    // return sorted by highest revenue\r\n    const sortedData = _.orderBy(data, 'revenue', 'desc');\r\n    // if count parameter was given, cut array by that count\r\n    if (count) {\r\n        return _.slice(sortedData, 0, count);\r\n    } else {\r\n        return sortedData;\r\n    }\r\n}\r\n\r\ninterface TopSellingCategoryInterface {\r\n    category: any,\r\n    quantitySold: number,\r\n    revenue: number\r\n}\r\nexport const getTopSellingCategoriesByDateRange = (allSalesByUser: any, startDateUnix: number, endDateUnix: number, count?: number): TopSellingCategoryInterface[] => {\r\n    const filteredSales = _.filter(allSalesByUser, sale => {\r\n        return sale.timestamp >= startDateUnix && sale.timestamp <= endDateUnix;\r\n    });\r\n    let allSaleItemsByUser: any = [];\r\n\r\n    for (const sale of filteredSales) {\r\n        allSaleItemsByUser = [...allSaleItemsByUser, ...sale.saleItems];\r\n    }\r\n\r\n    // for each sale item \r\n    const saleItemsByCategory: {\r\n        [categoryName: string]: any\r\n    } = {};\r\n\r\n    for (const saleItem of allSaleItemsByUser) {\r\n        const product = saleItem.product;\r\n        const categories = product.categories;\r\n        for (const category of categories) {\r\n            const existingEntry = _.find(saleItemsByCategory, (entry, categoryName) => {\r\n                return categoryName === category;\r\n            });\r\n            if (!existingEntry) {\r\n                saleItemsByCategory[category] = [saleItem]\r\n            } else {\r\n                saleItemsByCategory[category].push(saleItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    const data: TopSellingCategoryInterface[] = [];\r\n    _.forEach(saleItemsByCategory, (saleItemByCategory, key) => {\r\n        const entry: TopSellingCategoryInterface = {\r\n            category: key,\r\n            quantitySold: 0,\r\n            revenue: 0\r\n        };\r\n        const saleItems = saleItemsByCategory[key];\r\n        let quantityTotal = 0;\r\n        let revenueTotal = 0;\r\n        _.forEach(saleItems, saleItem => {\r\n            quantityTotal += saleItem.quantity;\r\n            const rawRevenue = saleItem.quantity * saleItem.salePrice;\r\n            revenueTotal += (+rawRevenue.toFixed(2)); // add '+' at the beginning to return number instead of string\r\n        });\r\n        entry.quantitySold = quantityTotal;\r\n        entry.revenue = revenueTotal;\r\n        data.push(entry);\r\n    });\r\n\r\n    // return sorted by highest revenue\r\n    const sortedData = _.orderBy(data, 'revenue', 'desc');\r\n    // if count parameter was given, cut array by that count\r\n    if (count) {\r\n        return _.slice(sortedData, 0, count);\r\n    } else {\r\n        return sortedData;\r\n    }\r\n}\r\n\r\ninterface QuantityAndRevenueInterface {\r\n    quantityTotal: number,\r\n    revenueTotal: number\r\n}\r\nconst getQuantityAndRevenueTotalBySale = (sale: any): QuantityAndRevenueInterface => {\r\n    const returnObj: QuantityAndRevenueInterface = {\r\n        quantityTotal: 0,\r\n        revenueTotal: 0\r\n    };\r\n    _.forEach(sale.saleItems, saleItem => {\r\n        returnObj.quantityTotal += saleItem.quantity;\r\n        const thisRevenue = saleItem.quantity * saleItem.salePrice;\r\n        returnObj.revenueTotal += thisRevenue;\r\n    });\r\n    return returnObj;\r\n}\r\n\r\nexport interface TopSellingCustomerInterface {\r\n    customer: any,\r\n    transactions: number,\r\n    units: number,\r\n    revenue: number,\r\n    profit: number\r\n}\r\nexport const getTopCustomersByDateRange = (allSalesByUser: any, startDateUnix: number, endDateUnix: number, count?: number): TopSellingCustomerInterface[] => {\r\n    const filteredSales = _.filter(allSalesByUser, sale => {\r\n        return sale.timestamp >= startDateUnix && sale.timestamp <= endDateUnix;\r\n    });\r\n    \r\n    const salesByCustomer = _.chain(filteredSales)\r\n        .filter((sale: any) => {\r\n            return sale.customer;\r\n        })\r\n        .groupBy((sale: any) => {\r\n            return sale.customer.id;\r\n        })\r\n        .value();\r\n\r\n    const data: TopSellingCustomerInterface[] = [];\r\n    _.forEach(salesByCustomer, (saleByCustomer: any, id: string) => {\r\n        const entry: TopSellingCustomerInterface = {\r\n            customer: null,\r\n            transactions: saleByCustomer.length,\r\n            units: 0,\r\n            revenue: 0,\r\n            profit: 0\r\n        };\r\n        const sales = salesByCustomer[id];\r\n        entry.customer = sales[0].customer;\r\n        let unitsTotal = 0;\r\n        let revenueTotal = 0;\r\n        let profitTotal = 0;\r\n        _.forEach(sales, sale => {\r\n            const calculatedQuantityAndRevenuePerSale = getQuantityAndRevenueTotalBySale(sale);\r\n            unitsTotal += calculatedQuantityAndRevenuePerSale.quantityTotal;\r\n            const rawRevenue = calculatedQuantityAndRevenuePerSale.revenueTotal;\r\n            revenueTotal += (+rawRevenue.toFixed(2)); // add '+' at the beginning to return number instead of string\r\n            const calculatedProfit = calculateProfitBySale(sale);\r\n            profitTotal += calculatedProfit;\r\n        });\r\n        entry.units = unitsTotal;\r\n        entry.revenue = revenueTotal;\r\n        entry.profit = profitTotal;\r\n        data.push(entry);\r\n    });\r\n\r\n    // return sorted by highest profit\r\n    const sortedData = _.orderBy(data, 'profit', 'desc');\r\n    // if count parameter was given, cut array by that count\r\n    if (count) {\r\n        return _.slice(sortedData, 0, count);\r\n    } else {\r\n        return sortedData;\r\n    }\r\n}","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { Input, Button } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nimport { calculateSubtotalBySaleItems, calculateTotalBySale, calculateProfitBySale } from '../../services/main';\r\n\r\nexport const sortByProperty = (a: any, b: any, propertyName: string): number => {\r\n    if (a && !b) {\r\n        return 1;\r\n    }\r\n    if (b && !a) {\r\n        return -1;\r\n    }\r\n    if (!a && !b) {\r\n        return 0;\r\n    }\r\n\r\n    const propertyOne = a[propertyName];\r\n    const propertyTwo = b[propertyName];\r\n\r\n    let returnValue = 0;\r\n\r\n    if (propertyName === 'customer') {\r\n        return sortByProperty(propertyOne, propertyTwo, 'name');\r\n    }\r\n\r\n    if (propertyName === 'address') {\r\n        const allowed = ['street1', 'street2', 'city', 'state', 'zipCode', 'country'];\r\n        const filteredObjA = _.pick(a, allowed);\r\n        const filteredObjB = _.pick(b, allowed);\r\n        const addressA = _.filter(Object.values(filteredObjA), value => value).join(', ');\r\n        const addressB = _.filter(Object.values(filteredObjB), value => value).join(', ');\r\n        return addressA.localeCompare(addressB);\r\n    }\r\n\r\n    const propertyType = typeof propertyOne;\r\n\r\n    switch (propertyType) {\r\n        case 'string':\r\n            returnValue = propertyOne.localeCompare(propertyTwo);\r\n            break;\r\n        case 'number':\r\n            returnValue = propertyOne - propertyTwo;\r\n            break;\r\n    }\r\n\r\n    return returnValue;\r\n}\r\n\r\nexport const getColumnSearchProps = (propertyName: string) => {\r\n    return {\r\n        filterDropdown(dropDownProps: any) {\r\n            const { setSelectedKeys, selectedKeys, confirm, clearFilters } = dropDownProps;\r\n            return (<div style={{ padding: 8 }}>\r\n                <Input\r\n                    placeholder='Search'\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={confirm}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Button\r\n                    type='primary'\r\n                    onClick={confirm}\r\n                    icon={<SearchOutlined />}\r\n                    size='small'\r\n                    style={{ width: 90, marginRight: 8 }}\r\n                >\r\n                    Search\r\n                </Button>\r\n                <Button onClick={clearFilters} size=\"small\" style={{ width: 90 }}>\r\n                    Reset\r\n                </Button>\r\n            </div>\r\n            );\r\n        },\r\n        filterIcon: (filtered: boolean) => (\r\n            <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\r\n        ),\r\n        onFilter: (value: any, record: any) => {\r\n            if (propertyName === 'categories') {\r\n                const categoriesInString = record.categories?.toString();\r\n                return categoriesInString.toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            if (propertyName === 'timestamp') {\r\n                const dateInString = moment.unix(record.timestamp).format(\"DD MMMM YYYY\");\r\n                return dateInString.toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            if (propertyName === 'createdAt') {\r\n                const dateInString = moment(record.createdAt).format(\"DD MMMM YYYY\");\r\n                return dateInString.toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            if (propertyName === 'saleItems') {\r\n                const productNames = _.map(record.saleItems, saleItem => {\r\n                    return saleItem.product.name;\r\n                });\r\n                return productNames.toString().toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            if (propertyName === 'customer') {\r\n                const name = record.customer?.name;\r\n                if (name) {\r\n                    return name.toLowerCase().includes(value.toLowerCase());\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (propertyName === 'address') {\r\n                const allowed = ['street1', 'street2', 'city', 'state', 'zipCode', 'country'];\r\n                const filteredObj = _.pick(record, allowed);\r\n                const address = _.filter(Object.values(filteredObj), value => value).join(', ');\r\n                return address.toLowerCase().includes(value.toLowerCase());\r\n            }\r\n\r\n            // hack - not an actual property\r\n            if (propertyName === 'subtotal') {\r\n                const subtotal = calculateSubtotalBySaleItems(record.saleItems);\r\n                return subtotal.toString().includes(value.toString());\r\n            }\r\n\r\n            // hack - not an actual property\r\n            if (propertyName === 'total') {\r\n                const total = calculateTotalBySale(record);\r\n                return total.toString().includes(value.toString());\r\n            }\r\n\r\n            // hack - not an actual property\r\n            if (propertyName === 'profit') {\r\n                const profit = calculateProfitBySale(record);\r\n                return profit.toString().includes(value.toString());\r\n            }\r\n\r\n            // hack - not an actual property\r\n            if (propertyName === 'productNameFromTopSellingProducts') {\r\n                return record.product.name.toString().toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            // hack - not an actual property\r\n            if (propertyName === 'categoryFromTopSellingProducts') {\r\n                const categoriesInString = record.product.categories?.toString();\r\n                return categoriesInString.toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            // hack - not an actual property\r\n            if (propertyName === 'categoryFromTopSellingCategories') {\r\n                return record.category.toLowerCase().includes(value.toString().toLowerCase());\r\n            }\r\n\r\n            if (record[propertyName]) {\r\n                return record[propertyName].toString().toLowerCase().includes(value.toString().toLowerCase());\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const formatNumber = (value: number | string) => {\r\n    let number = value;\r\n    if (typeof number === 'string') {\r\n        number = Number(number);\r\n    }\r\n    const multiplier = Math.pow(10, 2);\r\n    const rounded = Math.round(number * multiplier) / multiplier;\r\n    return rounded.toLocaleString();\r\n}","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Tag, Table, message } from 'antd';\r\nimport { RightSquareTwoTone, DownSquareTwoTone } from '@ant-design/icons';\r\n\r\nimport { userContext } from './App';\r\nimport AddProductButton from './AddProductButton';\r\nimport UpdateProductButton from './UpdateProductButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport withWindowDimension from './withWindowDimenstions';\r\nimport { paginationConfig } from './configs';\r\nimport { sortByProperty, getColumnSearchProps, formatNumber } from './utils/index';\r\n\r\nconst PRODUCTS_BY_USER_QUERY = gql`\r\n    {\r\n        productsByUser {\r\n            id\r\n            name\r\n            salePrice\r\n            costPrice\r\n            unit\r\n            sku\r\n            categories\r\n            notes\r\n            image\r\n            largeImage\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst CREATE_CATEGORIES_MUTATION = gql`\r\n    mutation CREATE_CATEGORIES_MUTATION($names: [String!]!) {\r\n        createCategories(names: $names) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst CATEGORIES_BY_USER_QUERY = gql`\r\n    {\r\n        categoriesByUser{\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst DELETE_PRODUCT_MUTATION = gql`\r\n    mutation DELETE_PRODUCT_MUTATION($id: ID!) {\r\n        deleteProduct(id: $id) {\r\n            id\r\n            name\r\n            salePrice\r\n            costPrice\r\n            unit\r\n            categories\r\n            notes\r\n            image\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Properties {\r\n    windowWidth: number;\r\n}\r\nconst Products = (props: Properties) => {\r\n    const [productIdForDeletion, setProductIdForDeletion] = React.useState<string>();\r\n\r\n    const { data: productsData, loading } = useQuery(PRODUCTS_BY_USER_QUERY);\r\n    const products = productsData ? productsData.productsByUser : null;\r\n\r\n    const { data } = useQuery(CATEGORIES_BY_USER_QUERY);\r\n    const categoriesData = data ? data.categoriesByUser : null;\r\n\r\n    // TODO move to projections\r\n    const [deleteProduct] = useMutation(DELETE_PRODUCT_MUTATION, {\r\n        variables: { id: productIdForDeletion },\r\n        update: (cache: any, payload: any) => {\r\n            // Read cache for the products\r\n            const data = cache.readQuery({ query: PRODUCTS_BY_USER_QUERY });\r\n\r\n            const filteredItems = _.filter(data.productsByUser, product => product.id !== payload.data.deleteProduct.id);\r\n            cache.writeQuery({ query: PRODUCTS_BY_USER_QUERY, data: { productsByUser: filteredItems } });\r\n        }\r\n    });\r\n\r\n    interface ProductDetailsPropsInterface {\r\n        product: any; // FIXME use sale interface from graphql\r\n        setIdForDeletion: (id: string) => void;\r\n        onDelete: () => void\r\n    }\r\n    const ProductDetails = (productDetailsProps: ProductDetailsPropsInterface) => {\r\n        const { name, image, salePrice, costPrice, sku, categories, notes } = productDetailsProps.product;\r\n        return (\r\n            <div className='product-detail-mobile'>\r\n                <div className='bring-550'>\r\n                    <p>\r\n                        <UpdateProductButton product={productDetailsProps.product} categories={categoriesData} />\r\n                        <DeleteButton\r\n                            className='btn-add-margin-left'\r\n                            onClick={() => productDetailsProps.setIdForDeletion(productDetailsProps.product.id)}\r\n                            onDelete={onProductDelete}\r\n                        />\r\n                    </p>\r\n                </div>\r\n\r\n                <div>{image && <img src={image} alt={name} className='product-img' />}</div>\r\n\r\n                <div>\r\n                    <div className='summary-row'>\r\n                        <span>Sale Price:</span> <span>{formatNumber(salePrice)}</span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Cost Price:</span> <span>{formatNumber(costPrice)}</span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>SKU:</span> <span>{sku}</span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Categories:</span>\r\n                        <span>\r\n                            {\r\n                                _.map(categories, category => {\r\n                                    return <Tag key={category}>{category}</Tag>\r\n                                })\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Notes:</span> <span>{notes}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onProductDelete = React.useCallback(async () => {\r\n        message.info('Please wait...');\r\n        await deleteProduct()\r\n            .then(() => {\r\n                message.success('Product deleted');\r\n            })\r\n            .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot delete product. Please contact SourceCodeXL.');\r\n            });\r\n    }, [deleteProduct]);\r\n\r\n    const expandableConfig = React.useMemo(() => {\r\n        if (props.windowWidth >= 1301) {\r\n            return undefined;\r\n        } else {\r\n            return {\r\n                expandedRowRender: (record: any) => <ProductDetails product={record} setIdForDeletion={setProductIdForDeletion} onDelete={onProductDelete} />,\r\n                expandIcon: (props: any) => {\r\n                    const { expanded, onExpand, record } = props;\r\n                    return (\r\n                    expanded ? <DownSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-1300' />\r\n                        : <RightSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-1300' />\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }, [props.windowWidth, onProductDelete]);\r\n\r\n    return (\r\n        <userContext.Consumer>\r\n            {value => {\r\n                if (!value) {\r\n                    return <p className='retain-margin'>You must be logged in to access this page.</p>\r\n                }\r\n                if (value && !value.verified) {\r\n                    return <p className='retain-margin'>Your email must be verified to access this page.</p>\r\n                }\r\n                return (\r\n                    <>\r\n                        <AddProductButton categories={categoriesData} />\r\n                        <Table\r\n                            bordered\r\n                            loading={loading}\r\n                            dataSource={products}\r\n                            rowKey='id'\r\n                            expandable={expandableConfig}\r\n                            pagination={paginationConfig}\r\n                            columns={[\r\n                                {\r\n                                    dataIndex: 'image',\r\n                                    render: (value, record) => {\r\n                                        if (value) {\r\n                                            return <img src={value} alt={record.name} width='150px' />\r\n                                        }\r\n                                        return null;\r\n                                    },\r\n                                    className: 'no-700'\r\n                                },\r\n                                {\r\n                                    title: 'Name',\r\n                                    dataIndex: 'name',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'name');\r\n                                    },\r\n                                    ...getColumnSearchProps('name')\r\n                                },\r\n                                {\r\n                                    title: <div><span className='no-1300'>Sale </span>Price</div>,\r\n                                    dataIndex: 'salePrice',\r\n                                    render: (value) => {\r\n                                        return <p className='align-right'>{formatNumber(value)}</p>;\r\n                                    },\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'salePrice');\r\n                                    },\r\n                                    ...getColumnSearchProps('salePrice')\r\n                                },\r\n                                {\r\n                                    title: 'Cost Price',\r\n                                    dataIndex: 'costPrice',\r\n                                    render: (value) => {\r\n                                        return <p className='align-right'>{formatNumber(value)}</p>;\r\n                                    },\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'costPrice');\r\n                                    },\r\n                                    ...getColumnSearchProps('costPrice'),\r\n                                    className: 'no-1300'\r\n                                },\r\n                                {\r\n                                    title: 'SKU',\r\n                                    dataIndex: 'sku',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'sku');\r\n                                    },\r\n                                    ...getColumnSearchProps('sku'),\r\n                                    className: 'no-1000'\r\n                                },\r\n                                {\r\n                                    title: 'Categories',\r\n                                    dataIndex: 'categories',\r\n                                    render: (value) => {\r\n                                        return _.map(value, category => {\r\n                                            return <Tag key={category}>{category}</Tag>\r\n                                        })\r\n                                    },\r\n                                    ...getColumnSearchProps('categories'),\r\n                                    className: 'no-1000'\r\n                                },\r\n                                {\r\n                                    title: 'Notes',\r\n                                    dataIndex: 'notes',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'notes');\r\n                                    },\r\n                                    ...getColumnSearchProps('notes'),\r\n                                    className: 'no-1300'\r\n                                },\r\n                                {\r\n                                    title: 'Edit',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value, record) => {\r\n                                        return (\r\n                                            <UpdateProductButton product={record} categories={categoriesData} />\r\n                                        );\r\n                                    },\r\n                                    className: 'no-550'\r\n                                },\r\n                                {\r\n                                    title: 'Delete ',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value) => {\r\n                                        return (\r\n                                            <DeleteButton\r\n                                                onClick={() => setProductIdForDeletion(value)}\r\n                                                onDelete={onProductDelete}\r\n                                            />\r\n                                        );\r\n                                    },\r\n                                    className: 'no-550'\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </>\r\n                );\r\n            }}\r\n        </userContext.Consumer>\r\n    )\r\n}\r\nexport default withWindowDimension(Products);\r\nexport { PRODUCTS_BY_USER_QUERY, CATEGORIES_BY_USER_QUERY, CREATE_CATEGORIES_MUTATION };","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Modal, Button, Input, Form, message } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { INVENTORIES_BY_USER_QUERY } from './Inventories';\r\nimport { layout, tailLayout } from './AddProductButton';\r\n\r\nconst CREATE_INVENTORY_MUTATION = gql`\r\nmutation CREATE_INVENTORY_MUTATION(\r\n    $name: String!\r\n) {\r\n    createInventory(\r\n        name: $name\r\n    ) {\r\n        id\r\n        name\r\n        createdAt\r\n        inventoryItems {\r\n            id\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst AddInventoryButton = () => {\r\n    const [name, setName] = React.useState<string>();\r\n    const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createInventory, { loading: createIventoryLoading }] = useMutation(CREATE_INVENTORY_MUTATION, {\r\n        variables: { name },\r\n        update: (store, response) => {\r\n            let newData = response.data.createInventory;\r\n            let localStoreData: any = store.readQuery({ query: INVENTORIES_BY_USER_QUERY });\r\n            localStoreData = { inventoriesByUser: [...localStoreData.inventoriesByUser, newData] };\r\n            store.writeQuery({ query: INVENTORIES_BY_USER_QUERY, data: localStoreData });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Modal title='Add an Inventory' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n                <Form {...layout} form={form} onFinish={async () => {\r\n                    await createInventory()\r\n                        .then(() => {\r\n                            setIsShowingModal(false);\r\n                            form.resetFields();\r\n                            message.success('Inventory added');\r\n                        })\r\n                        .catch(res => {\r\n                            _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                        });\r\n                }}>\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <Input value={name} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={createIventoryLoading}>Add{createIventoryLoading ? 'ing ' : ' '} Inventory</Button>\r\n                        <Button onClick={() => setIsShowingModal(false)}>Cancel</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button\r\n                onClick={() => setIsShowingModal(true)}\r\n                size='large'\r\n                icon={<PlusOutlined />}\r\n                className='add-button'\r\n            >\r\n                Add Inventory\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddInventoryButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Button, Input, Form, Modal, message } from 'antd';\r\n\r\nimport { layout, tailLayout } from './AddProductButton';\r\n\r\ninterface PropTypes {\r\n  inventory: any; // FIXME how to use GraphQL types on frontend?\r\n}\r\n\r\nconst UPDATE_INVENTORY_MUTATION = gql`\r\n    mutation UPDATE_INVENTORY_MUTATION(\r\n        $id: ID!\r\n        $name: String\r\n    ) {\r\n        updateInventory(\r\n            id: $id\r\n            name: $name\r\n        ) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst UpdateInventoryButton = (props: PropTypes) => {\r\n  const [name, setName] = React.useState<string>();\r\n  const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n\r\n  const [updateInventory, { loading: updateInventoryLoading }] = useMutation(UPDATE_INVENTORY_MUTATION, {\r\n    variables: { id: props.inventory.id, name }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal title='Update Inventory' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n        <Form\r\n          {...layout}\r\n          onFinish={async e => {\r\n            await updateInventory()\r\n              .then(() => {\r\n                message.success('Inventory updated');\r\n                setIsShowingModal(false);\r\n              })\r\n              .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot update. Please contact SourceCodeXL.');\r\n              });\r\n          }}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n          >\r\n            <Input defaultValue={props.inventory.name} onChange={e => setName(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={updateInventoryLoading} loading={updateInventoryLoading}>Updat{updateInventoryLoading ? 'ing' : 'e'} Inventory</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n      <Button onClick={() => setIsShowingModal(true)}>Edit</Button>\r\n    </>\r\n  )\r\n}\r\nexport default UpdateInventoryButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Table, message, Button } from 'antd';\r\n\r\nimport { userContext } from './App';\r\nimport AddInventoryButton from './AddInventoryButton';\r\nimport UpdateInventoryButton from './UpdateInventoryButton';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nconst INVENTORIES_BY_USER_QUERY = gql`\r\n    {\r\n        inventoriesByUser(orderBy: createdAt_DESC) {\r\n            id\r\n            name\r\n            inventoryItems {\r\n                id\r\n                product {\r\n                    id\r\n                    name\r\n                    unit\r\n                }\r\n                amount\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst DELETE_INVENTORY_MUTATION = gql`\r\n    mutation DELETE_INVENTORY_MUTATION($id: ID!) {\r\n        deleteInventory(id: $id) {\r\n            id\r\n            name\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst Inventories = () => {\r\n    const [idForDeletion, setIdForDeletion] = React.useState<string>();\r\n\r\n    const { data: inventoriesData, loading: inventoriesLoading } = useQuery(INVENTORIES_BY_USER_QUERY);\r\n    const inventories = inventoriesData ? inventoriesData.inventoriesByUser : null;\r\n\r\n    const [deleteInventory] = useMutation(DELETE_INVENTORY_MUTATION, {\r\n        variables: { id: idForDeletion },\r\n        update: (cache: any, payload: any) => {\r\n            const data = cache.readQuery({ query: INVENTORIES_BY_USER_QUERY });\r\n            const filteredItems = _.filter(data.inventoriesByUser, inventory => inventory.id !== payload.data.deleteInventory.id);\r\n            cache.writeQuery({ query: INVENTORIES_BY_USER_QUERY, data: { inventoriesByUser: filteredItems } });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <userContext.Consumer>\r\n            {value => {\r\n                if (!value) {\r\n                    return <p className='retain-margin'>You must be logged in to access this page.</p>\r\n                }\r\n                if (value && !value.verified) {\r\n                    return <p className='retain-margin'>Your email must be verified to access this page.</p>\r\n                }\r\n                return (\r\n                    <>\r\n                        <AddInventoryButton />\r\n                        <Table\r\n                            loading={inventoriesLoading}\r\n                            dataSource={inventories}\r\n                            rowKey='id'\r\n                            columns={[\r\n                                {\r\n                                    title: 'Name',\r\n                                    dataIndex: 'name'\r\n                                },\r\n                                {\r\n                                    title: 'View Stock',\r\n                                    dataIndex: 'id',\r\n                                    render: (value) => {\r\n                                        return <Link to={`/inventory?id=${value}`}><Button>View Stock</Button></Link>\r\n                                    }\r\n                                },\r\n                                {\r\n                                    title: 'Edit ✏️',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value, record) => {\r\n                                        return (\r\n                                            <UpdateInventoryButton inventory={record} />\r\n                                        );\r\n                                    }\r\n                                },\r\n                                {\r\n                                    title: 'Delete ',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value) => {\r\n                                        return (\r\n                                            <DeleteButton\r\n                                                onClick={() => setIdForDeletion(value)}\r\n                                                onDelete={async () => {\r\n                                                    message.info('Please wait...');\r\n                                                    await deleteInventory()\r\n                                                        .then(() => {\r\n                                                            message.success('Inventory deleted');\r\n                                                        })\r\n                                                        .catch(res => {\r\n                                                            _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                                                            message.error('Error: cannot delete. Please contact SourceCodeXL.');\r\n                                                        });\r\n                                                }}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </>\r\n                );\r\n            }}\r\n        </userContext.Consumer>\r\n    );\r\n}\r\nexport default Inventories;\r\nexport { INVENTORIES_BY_USER_QUERY };","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Modal, Button, Input, Form, message } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { CUSTOMERS_BY_USER_QUERY } from './Customers';\r\nimport { layout, tailLayout } from './AddProductButton';\r\n\r\nconst CREATE_CUSTOMER_MUTATION = gql`\r\nmutation CREATE_CUSTOMER_MUTATION(\r\n    $name: String!\r\n    $email: String\r\n    $phone: String\r\n    $street1: String\r\n    $street2: String\r\n    $city: String\r\n    $state: String\r\n    $zipCode: String\r\n    $country: String\r\n) {\r\n    createCustomer(\r\n        name: $name\r\n        email: $email\r\n        phone: $phone\r\n        street1: $street1\r\n        street2: $street2\r\n        city: $city\r\n        state: $state\r\n        zipCode: $zipCode\r\n        country: $country\r\n    ) {\r\n        id\r\n        name\r\n        email\r\n        phone\r\n        street1\r\n        street2\r\n        city\r\n        state\r\n        zipCode\r\n        country\r\n        createdAt\r\n    }\r\n}\r\n`;\r\n\r\nconst AddCustomerButton = () => {\r\n    const [name, setName] = React.useState<string>();\r\n    const [email, setEmail] = React.useState<string>();\r\n    const [phone, setPhone] = React.useState<string>('');\r\n    const [street1, setStreet1] = React.useState<string>();\r\n    const [street2, setStreet2] = React.useState<string>();\r\n    const [city, setCity] = React.useState<string>();\r\n    const [state, setState] = React.useState<string>();\r\n    const [zipCode, setZipCode] = React.useState<string>();\r\n    const [country, setCountry] = React.useState<string>();\r\n    const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createCustomer, { loading: createCustomerLoading }] = useMutation(CREATE_CUSTOMER_MUTATION, {\r\n        variables: { name, email, phone, street1, street2, city, state, zipCode, country },\r\n        update: (store, response) => {\r\n            let newData = response.data.createCustomer;\r\n            let localStoreData: any = store.readQuery({ query: CUSTOMERS_BY_USER_QUERY });\r\n            localStoreData = { customersByUser: [...localStoreData.customersByUser, newData] };\r\n            store.writeQuery({ query: CUSTOMERS_BY_USER_QUERY, data: localStoreData });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Modal title='Add a Customer' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n                <Form {...layout} form={form} onFinish={async () => {\r\n                    await createCustomer()\r\n                        .then(() => {\r\n                            setIsShowingModal(false);\r\n                            form.resetFields();\r\n                            message.success('Customer added');\r\n                        })\r\n                        .catch(res => {\r\n                            _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                        });\r\n                }}>\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <Input value={name} onChange={e => setName(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        rules={[{ type: 'email' }]}\r\n                    >\r\n                        <Input value={name} onChange={e => setEmail(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Phone\"\r\n                        name=\"phone\"\r\n                    >\r\n                        <Input value={phone} onChange={e => setPhone(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Street1\"\r\n                        name=\"street1\"\r\n                    >\r\n                        <Input value={street1} onChange={e => setStreet1(e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Street2\"\r\n                        name=\"street2\"\r\n                    >\r\n                        <Input value={street2} onChange={e => setStreet2(e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"City\"\r\n                        name=\"city\"\r\n                    >\r\n                        <Input value={city} onChange={e => setCity(e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"State\"\r\n                        name=\"state\"\r\n                    >\r\n                        <Input value={state} onChange={e => setState(e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Zip Code\"\r\n                        name=\"zipCode\"\r\n                    >\r\n                        <Input value={zipCode} onChange={e => setZipCode(e.target.value)} />\r\n                    </Form.Item>\r\n                    {/** TODO make country a dropdown */}\r\n                    <Form.Item\r\n                        label=\"Country\"\r\n                        name=\"country\"\r\n                    >\r\n                        <Input value={country} onChange={e => setCountry(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={createCustomerLoading}>Add{createCustomerLoading ? 'ing ' : ' '} Customer</Button>\r\n                        <Button onClick={() => setIsShowingModal(false)}>Cancel</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button\r\n                onClick={() => setIsShowingModal(true)}\r\n                size='large'\r\n                icon={<PlusOutlined />}\r\n                className='add-button btn-add-margin-left'\r\n            >\r\n                Add Customer\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCustomerButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Button, Input, Form, Modal, message } from 'antd';\r\n\r\nimport { CUSTOMERS_BY_USER_QUERY } from './Customers';\r\nimport { layout, tailLayout } from './AddProductButton';\r\n\r\ninterface PropTypes {\r\n  customer: any; // FIXME how to use GraphQL types on frontend?\r\n}\r\n\r\nconst UPDATE_CUSTOMER_MUTATION = gql`\r\n    mutation UPDATE_CUSTOMER_MUTATION(\r\n        $id: ID!\r\n        $name: String\r\n        $email: String\r\n        $phone: String\r\n        $street1: String\r\n        $street2: String\r\n        $city: String\r\n        $state: String\r\n        $zipCode: String\r\n        $country: String\r\n    ) {\r\n      updateCustomer(\r\n            id: $id\r\n            name: $name\r\n            email: $email\r\n            phone: $phone\r\n            street1: $street1\r\n            street2: $street2\r\n            city: $city\r\n            state: $state\r\n            zipCode: $zipCode\r\n            country: $country\r\n        ) {\r\n            id\r\n            name\r\n            email\r\n            phone\r\n            street1\r\n            street2\r\n            city\r\n            state\r\n            zipCode\r\n            country\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst UpdateCustomerButton = (props: PropTypes) => {\r\n  const [name, setName] = React.useState<string>();\r\n  const [email, setEmail] = React.useState<string>();\r\n  const [phone, setPhone] = React.useState<string>();\r\n  const [street1, setStreet1] = React.useState<string>();\r\n  const [street2, setStreet2] = React.useState<string>();\r\n  const [city, setCity] = React.useState<string>();\r\n  const [state, setState] = React.useState<string>();\r\n  const [zipCode, setZipCode] = React.useState<string>();\r\n  const [country, setCountry] = React.useState<string>();\r\n  const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n\r\n  const [updateCustomer, { loading }] = useMutation(UPDATE_CUSTOMER_MUTATION, {\r\n    variables: { id: props.customer.id, name, email, phone, street1, street2, city, state, zipCode, country },\r\n    refetchQueries: [{ query: CUSTOMERS_BY_USER_QUERY }]\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal title='Update Customer' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n        <Form\r\n          {...layout}\r\n          initialValues={{\r\n            name: props.customer.name,\r\n            email: props.customer.email,\r\n            phone: props.customer.phone,\r\n            street1: props.customer.street1,\r\n            street2: props.customer.street2,\r\n            city: props.customer.city,\r\n            state: props.customer.state,\r\n            zipCode: props.customer.zipCode,\r\n            country: props.customer.country,\r\n          }}\r\n          onFinish={async e => {\r\n            await updateCustomer()\r\n              .then(() => {\r\n                message.success('Customer updated');\r\n                setIsShowingModal(false);\r\n              })\r\n              .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot update. Please contact SourceCodeXL.');\r\n              });\r\n          }}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n          >\r\n            <Input onChange={e => setName(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            rules={[{ type: 'email' }]}\r\n          >\r\n            <Input onChange={e => setEmail(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Phone\"\r\n            name=\"phone\"\r\n          >\r\n            <Input onChange={e => setPhone(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Street1\"\r\n            name=\"street1\"\r\n          >\r\n            <Input onChange={e => setStreet1(e.target.value)} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Street2\"\r\n            name=\"street2\"\r\n          >\r\n            <Input onChange={e => setStreet2(e.target.value)} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"City\"\r\n            name=\"city\"\r\n          >\r\n            <Input onChange={e => setCity(e.target.value)} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"State\"\r\n            name=\"state\"\r\n          >\r\n            <Input onChange={e => setState(e.target.value)} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Zip Code\"\r\n            name=\"zipCode\"\r\n          >\r\n            <Input onChange={e => setZipCode(e.target.value)} />\r\n          </Form.Item>\r\n          {/** TODO make country a dropdown */}\r\n          <Form.Item\r\n            label=\"Country\"\r\n            name=\"country\"\r\n          >\r\n            <Input onChange={e => setCountry(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={loading} loading={loading}>Updat{loading ? 'ing' : 'e'} Customer</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n      <Button onClick={() => setIsShowingModal(true)}><span aria-label='edit' role='img'>✏️</span></Button>\r\n    </>\r\n  )\r\n}\r\nexport default UpdateCustomerButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Table, message } from 'antd';\r\nimport { RightSquareTwoTone, DownSquareTwoTone } from '@ant-design/icons';\r\n\r\nimport { userContext } from './App';\r\nimport AddCustomerButton from './AddCustomerButton';\r\nimport UpdateCustomerButton from './UpdateCustomerButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport { paginationConfig } from './configs';\r\n\r\nimport { sortByProperty, getColumnSearchProps } from './utils/index';\r\n\r\nconst CUSTOMERS_BY_USER_QUERY = gql`\r\n    {\r\n        customersByUser(orderBy: createdAt_DESC) {\r\n            id\r\n            name\r\n            email\r\n            phone\r\n            street1\r\n            street2\r\n            city\r\n            state\r\n            zipCode\r\n            country\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst DELETE_CUSTOMER_MUTATION = gql`\r\n    mutation DELETE_CUSTOMER_MUTATION($id: ID!) {\r\n        deleteCustomer(id: $id) {\r\n            id\r\n            name\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst Customers = () => {\r\n    const [idForDeletion, setIdForDeletion] = React.useState<string>();\r\n\r\n    const { data: customersData, loading: customersLoading } = useQuery(CUSTOMERS_BY_USER_QUERY);\r\n    const customers = customersData ? customersData.customersByUser : null;\r\n\r\n    const [deleteCustomer] = useMutation(DELETE_CUSTOMER_MUTATION, {\r\n        variables: { id: idForDeletion },\r\n        update: (cache: any, payload: any) => {\r\n            const data = cache.readQuery({ query: CUSTOMERS_BY_USER_QUERY });\r\n            const filteredItems = _.filter(data.customersByUser, item => item.id !== payload.data.deleteCustomer.id);\r\n            cache.writeQuery({ query: CUSTOMERS_BY_USER_QUERY, data: { customersByUser: filteredItems } });\r\n        }\r\n    });\r\n\r\n    const allowedForAddress = ['street1', 'street2', 'city', 'state', 'zipCode', 'country'];\r\n\r\n    interface DetailsPropsInterface {\r\n        customer: any; // FIXME use sale interface from graphql\r\n        setIdForDeletion: (id: string) => void;\r\n        onDelete: () => void\r\n    }\r\n    const CustomerDetails = (detailsProps: DetailsPropsInterface) => {\r\n        const { email, phone } = detailsProps.customer;\r\n        \r\n        const filteredObj = _.pick(detailsProps.customer, allowedForAddress);\r\n        const addressString = _.filter(Object.values(filteredObj), value => value).join(', ');\r\n\r\n        return (\r\n            <div className='customer-detail-mobile'>\r\n                <div className='bring-700'>\r\n                    <p>\r\n                        <UpdateCustomerButton customer={detailsProps.customer} />\r\n                        <DeleteButton\r\n                            className='btn-add-margin-left'\r\n                            onClick={() => detailsProps.setIdForDeletion(detailsProps.customer.id)}\r\n                            onDelete={detailsProps.onDelete}\r\n                        />\r\n                    </p>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className='bring-500'>\r\n                        <div className='summary-row'>\r\n                            <span>Email:</span> <span>{email}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className='bring-500'>\r\n                        <div className='summary-row'>\r\n                            <span>Phone:</span> <span>{phone}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Address:</span><span>{addressString}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        message.info('Please wait...');\r\n        await deleteCustomer()\r\n            .then(() => {\r\n                message.success('Customer deleted');\r\n            })\r\n            .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot delete. Please contact SourceCodeXL.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <userContext.Consumer>\r\n            {value => {\r\n                if (!value) {\r\n                    return <p className='retain-margin'>You must be logged in to access this page.</p>\r\n                }\r\n                if (value && !value.verified) {\r\n                    return <p className='retain-margin'>Your email must be verified to access this page.</p>\r\n                }\r\n                return (\r\n                    <>\r\n                        <AddCustomerButton />\r\n                        <Table\r\n                            loading={customersLoading}\r\n                            dataSource={customers}\r\n                            rowKey='id'\r\n                            pagination={paginationConfig}\r\n                            expandable={{\r\n                                expandedRowRender: record => <CustomerDetails customer={record} setIdForDeletion={setIdForDeletion} onDelete={onDelete} />,\r\n                                expandIcon: ({ expanded, onExpand, record }) => (\r\n                                    expanded ? <DownSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-900' />\r\n                                        : <RightSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-900' />\r\n                                )\r\n                            }}\r\n                            columns={[\r\n                                {\r\n                                    title: 'Name',\r\n                                    dataIndex: 'name',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'name');\r\n                                    },\r\n                                    ...getColumnSearchProps('name')\r\n                                },\r\n                                {\r\n                                    title: 'Email',\r\n                                    dataIndex: 'email',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'email');\r\n                                    },\r\n                                    ...getColumnSearchProps('email'),\r\n                                    className: 'no-500'\r\n                                },\r\n                                {\r\n                                    title: 'Phone',\r\n                                    dataIndex: 'phone',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'phone');\r\n                                    },\r\n                                    ...getColumnSearchProps('phone'),\r\n                                    className: 'no-500'\r\n                                },\r\n                                {\r\n                                    title: 'Address',\r\n                                    dataIndex: 'id',\r\n                                    key: 'address',\r\n                                    render: (value, record) => {\r\n                                        const filteredObj = _.pick(record, allowedForAddress);\r\n                                        return (\r\n                                            _.filter(Object.values(filteredObj), value => value).join(', ')\r\n                                        )\r\n                                    },\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'address');\r\n                                    },\r\n                                    ...getColumnSearchProps('address'),\r\n                                    className: 'no-900'\r\n                                },\r\n                                {\r\n                                    title: 'Edit',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value, record) => {\r\n                                        return (\r\n                                            <UpdateCustomerButton customer={record} />\r\n                                        );\r\n                                    },\r\n                                    className: 'no-700'\r\n                                },\r\n                                {\r\n                                    title: 'Delete ',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value) => {\r\n                                        return (\r\n                                            <DeleteButton\r\n                                                onClick={() => setIdForDeletion(value)}\r\n                                                onDelete={onDelete}\r\n                                            />\r\n                                        );\r\n                                    },\r\n                                    className: 'no-700'\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </>\r\n                );\r\n            }}\r\n        </userContext.Consumer>\r\n    );\r\n}\r\nexport default Customers;\r\nexport { CUSTOMERS_BY_USER_QUERY };","import React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { Modal, Form, Input, Select, Button, message, DatePicker, Divider, InputNumber, Table } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\nimport { CUSTOMERS_BY_USER_QUERY } from './Customers';\r\nimport { SALES_BY_USER_QUERY } from './Sales';\r\nimport { calculateGrossProfitBySaleItems, calculateSubtotalBySaleItems, calculateTotalBySale } from '../services/main';\r\nimport { formatNumber } from './utils/index';\r\n\r\nconst CREATE_SALE_MUTATION = gql`\r\n    mutation CREATE_SALE_MUTATION(\r\n        $saleItems: [SaleItemInput!]!,\r\n        $timestamp: Int!,\r\n        $customerId: String,\r\n        $discountType: SpecialSaleDeductionType,\r\n        $discountValue: String,\r\n        $taxType: SpecialSaleDeductionType,\r\n        $taxValue: String,\r\n        $shipping: String,\r\n        $note: String\r\n    ) {\r\n        createSaleAndItems(\r\n            saleItems: $saleItems,\r\n            timestamp: $timestamp,\r\n            customerId: $customerId,\r\n            discountType: $discountType,\r\n            discountValue: $discountValue,\r\n            taxType: $taxType,\r\n            taxValue: $taxValue,\r\n            shipping: $shipping,\r\n            note: $note\r\n        ) {\r\n            id\r\n            timestamp\r\n            customer {\r\n                id\r\n                name\r\n            }\r\n            saleItems {\r\n                id\r\n                quantity\r\n                product {\r\n                    id\r\n                    name\r\n                    salePrice\r\n                    costPrice\r\n                    categories\r\n                }\r\n                salePrice\r\n                costPrice\r\n            }\r\n            discountType\r\n            discountValue\r\n            taxType\r\n            taxValue\r\n            shipping\r\n            note\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\ninterface PropTypes {\r\n    products: any; // FIXME use graphql types\r\n}\r\n\r\ninterface TableSaleItemProps {\r\n    product: any; // FIXME how to use graphql types in frontend\r\n    salePrice: string;\r\n    costPrice?: string;\r\n    quantity: number;\r\n    timeAdded?: number;\r\n}\r\n\r\ninterface SaleItemProps {\r\n    product: any; // FIXME how to use graphql types in frontend\r\n    salePrice: string;\r\n    costPrice?: string;\r\n    quantity: number;\r\n}\r\n\r\nconst AddSaleButton = (props: PropTypes) => {\r\n    const [modalIsVisible, setModalIsVisible] = React.useState<boolean>();\r\n    const [saleItems, setSaleItems] = React.useState<TableSaleItemProps[]>([{\r\n        product: {\r\n            id: null\r\n        },\r\n        salePrice: '0',\r\n        quantity: 1,\r\n        timeAdded: moment.now()\r\n    }]);\r\n    const [customerId, setCustomerId] = React.useState<string>();\r\n    const [timestamp, setTimestamp] = React.useState<number>(moment().unix());\r\n    const [discountType, setDiscountType] = React.useState<string>('FLAT');\r\n    const [discountValue, setDiscountValue] = React.useState<string | null>();\r\n    const [taxType, setTaxType] = React.useState<string>('FLAT');\r\n    const [taxValue, setTaxValue] = React.useState<string | null>();\r\n    const [shipping, setShipping] = React.useState<string | null>();\r\n    const [note, setNote] = React.useState<string>();\r\n    const [total, setTotal] = React.useState<number>();\r\n    const [form] = Form.useForm();\r\n\r\n    React.useEffect(() => {\r\n        setTotal(calculateTotalBySale({\r\n            saleItems,\r\n            discountType,\r\n            discountValue,\r\n            taxType,\r\n            taxValue,\r\n            shipping,\r\n        }));\r\n\r\n    }, [saleItems, discountType, discountValue, taxType, taxValue, shipping]);\r\n\r\n    const getFilteredSaleItems = (rawSaleItems: TableSaleItemProps[]): SaleItemProps[] => {\r\n        const cleanSaleItems = _(rawSaleItems)\r\n            .filter(saleItem =>  (saleItem.product.id != null))\r\n            .map(saleItem => {\r\n                const duplicate = {...saleItem};\r\n                delete duplicate.timeAdded;\r\n                return duplicate;\r\n            })\r\n            .value();\r\n        return cleanSaleItems;\r\n    };\r\n\r\n    const [createSaleAndItems, { loading: createSaleLoading }] = useMutation(CREATE_SALE_MUTATION, {\r\n        variables: { saleItems: getFilteredSaleItems(saleItems), customerId, timestamp, discountType, discountValue, taxType, taxValue, shipping, note },\r\n        update: (cache, payload) => {\r\n            const data: any = cache.readQuery({ query: SALES_BY_USER_QUERY });\r\n            const dataCopy: any = _.cloneDeep(data);\r\n            dataCopy.salesByUser.push(payload.data.createSaleAndItems);\r\n            cache.writeQuery({ query: SALES_BY_USER_QUERY, data: dataCopy });\r\n        }\r\n    });\r\n\r\n    const saleItemIds = _.map(saleItems, saleItem => saleItem.product.id);\r\n\r\n    const { data: customersByUserData } = useQuery(CUSTOMERS_BY_USER_QUERY);\r\n    const customers = customersByUserData ? customersByUserData.customersByUser : null;\r\n\r\n    const handleProductChange = (saleItem: TableSaleItemProps, value: string) => {\r\n        const product = JSON.parse(value);\r\n        const updatedSaleItems = [...saleItems];\r\n        const updatedSaleItem: TableSaleItemProps = { ...saleItem };\r\n        updatedSaleItem.product = product;\r\n        updatedSaleItem.salePrice = product.salePrice;\r\n        updatedSaleItem.costPrice = product.costPrice;\r\n        const index = _.findIndex(updatedSaleItems, saleItem);\r\n        updatedSaleItems.splice(index, 1, updatedSaleItem);\r\n        setSaleItems(updatedSaleItems);\r\n    }\r\n\r\n    const handleQuantityChange = (saleItem: TableSaleItemProps, value: number | undefined) => {\r\n        const updatedSaleItems = [...saleItems];\r\n        const updatedSaleItem: TableSaleItemProps = { ...saleItem };\r\n        updatedSaleItem.quantity = value ? value : 1;\r\n        const index = _.findIndex(updatedSaleItems, saleItem);\r\n        updatedSaleItems.splice(index, 1, updatedSaleItem);\r\n        setSaleItems(updatedSaleItems);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title=\"Add a Sale Record\"\r\n                visible={modalIsVisible}\r\n                onCancel={() => setModalIsVisible(false)}\r\n                footer={null}\r\n                className='add-sale-modal'\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    labelAlign='left'\r\n                    onFinish={async () => {\r\n                        if (saleItems.length > 0 && saleItems[0].product.id !== null) {\r\n                            await createSaleAndItems()\r\n                                .then(() => {\r\n                                    setModalIsVisible(false);\r\n                                form.resetFields();\r\n                                setCustomerId(undefined);\r\n                                setSaleItems([{\r\n                                    product: {\r\n                                        id: null\r\n                                    },\r\n                                    salePrice: '0',\r\n                                    quantity: 1,\r\n                                    timeAdded: moment.now()\r\n                                }]);\r\n                                setDiscountType('FLAT');\r\n                                setDiscountValue(undefined);\r\n                                setTaxType('FLAT');\r\n                                setTaxValue(undefined);\r\n                                message.success('Sale record added');\r\n                                })\r\n                                .catch(res => {\r\n                                    _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                                    message.error('Error creating sale entry. Please contact SourceCodeXL.');\r\n                                });\r\n                        } else {\r\n                            message.error('Minimum of one product is required to record a sale');\r\n                        }\r\n                    }}\r\n                >\r\n                    <Form.Item label='Date of Sale' {...layout} rules={[{ required: true, message: 'This field is required' }]}>\r\n                        <DatePicker\r\n                            allowClear={false}\r\n                            format={'DD-MM-YYYY'}\r\n                            value={moment.unix(timestamp)}\r\n                            onChange={(date) => setTimestamp(moment(date as any).unix())}\r\n                            style={{ width: '190px' }}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label='Customer' {...layout}>\r\n                        <Select\r\n                            value={customerId}\r\n                            onChange={setCustomerId}\r\n                            style={{ width: '190px' }}\r\n                        >\r\n                            {\r\n                                _.map(customers, customer => (\r\n                                    <Select.Option key={customer.id} value={customer.id}>{customer.name}</Select.Option>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Divider />\r\n\r\n                    <Form.Item>\r\n                        <Button\r\n                            onClick={() => {\r\n                                const newSaleItems = [...saleItems];\r\n                                newSaleItems.push({\r\n                                    product: {\r\n                                        id: null\r\n                                    },\r\n                                    salePrice: '0',\r\n                                    quantity: 1,\r\n                                    timeAdded: moment.now()\r\n                                });\r\n                                setSaleItems(newSaleItems);\r\n                            }}\r\n                            icon={<PlusOutlined />}\r\n                        >Add Product</Button>\r\n                    </Form.Item>\r\n\r\n                    <Table\r\n                        size='small'\r\n                        pagination={false}\r\n                        dataSource={saleItems}\r\n                        rowKey={(saleItem) => (`${saleItem.product.id}-${saleItem.timeAdded}`)}\r\n                        columns={[\r\n                            {\r\n                                key: 'Product',\r\n                                title: 'Product',\r\n                                dataIndex: 'id',\r\n                                render: (value, record) => (\r\n                                    <Select\r\n                                        style={{ width: '100%', maxWidth: '190px' }}\r\n                                        value={record.product.id && JSON.stringify(record.product)}\r\n                                        onChange={(value) => handleProductChange(record, value)}\r\n                                        placeholder='Add a product'\r\n                                    >\r\n                                        {\r\n                                            _.map(props.products, product =>\r\n                                                <Select.Option\r\n                                                    value={JSON.stringify(product)}\r\n                                                    disabled={_.includes(saleItemIds, product.id)}\r\n                                                    key={product.id}\r\n                                                >\r\n                                                    {product.name}\r\n                                                </Select.Option>\r\n                                            )\r\n                                        }\r\n                                    </Select>\r\n                                )\r\n                            },\r\n                            {\r\n                                key: 'Quantity',\r\n                                title: 'Quantity',\r\n                                dataIndex: 'quantity',\r\n                                render: (value, record) => (\r\n                                    <InputNumber\r\n                                        value={value}\r\n                                        min={1}\r\n                                        onChange={(value) => handleQuantityChange(record, value)}\r\n                                    />\r\n                                )\r\n                            },\r\n                            {\r\n                                key: 'Price',\r\n                                title: 'Price',\r\n                                dataIndex: 'salePrice',\r\n                                render: (value) => (\r\n                                    formatNumber(value)\r\n                                ),\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                key: 'Cost',\r\n                                title: 'Cost',\r\n                                dataIndex: 'costPrice',\r\n                                render: (value) => (\r\n                                    value ? formatNumber(value) : 0\r\n                                ),\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                key: 'Subtotal',\r\n                                title: 'Subtotal',\r\n                                dataIndex: 'product',\r\n                                render: (value, record) => (\r\n                                    value.salePrice ? record.quantity && formatNumber(parseFloat(Number(value.salePrice * record.quantity).toFixed(2))) : 0\r\n                                ),\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                key: 'Profit',\r\n                                title: 'Profit',\r\n                                dataIndex: 'product',\r\n                                render: (value, record) => {\r\n                                    return formatNumber(calculateGrossProfitBySaleItems([record]));\r\n                                },\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                key: 'Remove',\r\n                                title: <div className='no-700'>Remove</div>,\r\n                                dataIndex: 'product',\r\n                                render: (value, record) => (\r\n                                    <span\r\n                                        style={{ 'cursor': 'pointer' }}\r\n                                        onClick={() => {\r\n                                            let newSaleItems = [...saleItems];\r\n                                            newSaleItems = _.filter(newSaleItems, newSaleItem => {\r\n                                                return newSaleItem !== record\r\n                                            });\r\n                                            setSaleItems(newSaleItems);\r\n                                        }}\r\n                                        aria-label='delete'\r\n                                        role='img'\r\n                                    >❌</span>\r\n                                )\r\n                            }\r\n                        ]}\r\n                        summary={(pageData) => {\r\n                            const pageDataCopy = [...pageData];\r\n                            const totalProfit = calculateGrossProfitBySaleItems(pageDataCopy);\r\n                            const totalSubtotal = calculateSubtotalBySaleItems(pageDataCopy);\r\n                            let totalQuantity = 0;\r\n                            _.each(pageDataCopy, saleItem => totalQuantity += saleItem.quantity);\r\n\r\n                            return (\r\n                                <>\r\n                                    <tr>\r\n                                        <th style={{ padding: '8px' }}>Total</th>\r\n                                        <th style={{ padding: '16px' }}>{totalQuantity}</th>\r\n                                        <th style={{ padding: '8px' }} className='no-700'></th>\r\n                                        <th style={{ padding: '8px' }} className='no-700'></th>\r\n                                        <th style={{ padding: '8px' }} className='no-700 align-right'><span>{formatNumber(parseFloat(Number(totalSubtotal).toFixed(2)))}</span></th>\r\n                                        <th style={{ padding: '8px' }} className='no-700 align-right'><span>{formatNumber(parseFloat(Number(totalProfit).toFixed(2)))}</span></th>\r\n                                        <th style={{ padding: '8px' }}></th>\r\n                                    </tr>\r\n                                </>\r\n                            )\r\n                        }}\r\n                    />\r\n\r\n                    <span>Discount:</span>\r\n                    <div className='deduction-form-row'>\r\n                        <div className='deduction-type-col'>\r\n                            <Form.Item>\r\n                                <Select\r\n                                    defaultValue='FLAT'\r\n                                    style={{ width: '100%' }}\r\n                                    value={discountType}\r\n                                    onChange={(value) => setDiscountType(value)}\r\n                                >\r\n                                    <Select.Option value={'FLAT'} key={'FLAT'}>{'FLAT'}</Select.Option>\r\n                                    <Select.Option value={'PERCENTAGE'} key={'%'}>{'%'}</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </div>\r\n                        <div className='deduction-value-col'>\r\n                            <Form.Item>\r\n                                <InputNumber\r\n                                    value={discountValue ? parseFloat(discountValue) : 0}\r\n                                    onChange={(value) => {\r\n                                        let valueToSet = null;\r\n                                        if (value) {\r\n                                            valueToSet = value.toString();\r\n                                        }\r\n                                        setDiscountValue(valueToSet)\r\n                                    }}\r\n                                />\r\n                            </Form.Item>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <span>Tax:</span>\r\n                    <div className='deduction-form-row'>\r\n                        <div className='deduction-type-col'>\r\n                            <Form.Item>\r\n                                <Select\r\n                                    defaultValue='FLAT'\r\n                                    style={{ width: '100%' }}\r\n                                    value={taxType}\r\n                                    onChange={(value) => setTaxType(value)}\r\n                                >\r\n                                    <Select.Option value={'FLAT'} key={'FLAT'}>{'FLAT'}</Select.Option>\r\n                                    <Select.Option value={'PERCENTAGE'} key={'%'}>{'%'}</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </div>\r\n                        <div className='deduction-value-col'>\r\n                            <Form.Item>\r\n                                <InputNumber\r\n                                    value={taxValue ? parseFloat(taxValue) : 0}\r\n                                    onChange={(value) => {\r\n                                        let valueToSet = null;\r\n                                        if (value) {\r\n                                            valueToSet = value.toString();\r\n                                        }\r\n                                        setTaxValue(valueToSet)\r\n                                    }}\r\n                                />\r\n                            </Form.Item>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Form.Item\r\n                        label='Shipping'\r\n                        name='shipping'\r\n                        {...layout}\r\n                    >\r\n                        <InputNumber\r\n                            value={shipping ? parseFloat(shipping) : 0}\r\n                            onChange={value => {\r\n                                let valueToSet = null;\r\n                                if (value) {\r\n                                    valueToSet = value.toString();\r\n                                }\r\n                                setShipping(valueToSet);\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Divider />\r\n\r\n                    <div>\r\n                        <span className='bold'>TOTAL: {total && formatNumber(total.toFixed(2))}</span>\r\n                    </div>\r\n\r\n                    <Divider />\r\n\r\n                    <Form.Item\r\n                        label=\"Notes\"\r\n                        name=\"notes\"\r\n                        {...layout}\r\n                    >\r\n                        <Input value={note} onChange={e => setNote(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" disabled={createSaleLoading} loading={createSaleLoading} style={{ width: '100%' }}>\r\n                            Add{createSaleLoading ? 'ing' : ' '} Sale Record\r\n                                </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button\r\n                onClick={() => setModalIsVisible(true)}\r\n                size='large'\r\n                icon={<PlusOutlined />}\r\n                className='add-button btn-add-margin-left'\r\n            >\r\n                <span className='no-550'>Add Sale Record</span>\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\nexport default AddSaleButton;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 }\r\n}\r\nexport { layout };","import React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { Modal, Form, Input, Select, Button, message, DatePicker, Divider, InputNumber, Table } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport * as _ from 'lodash';\r\n\r\nimport { CUSTOMERS_BY_USER_QUERY } from './Customers';\r\nimport { SALES_BY_USER_QUERY } from './Sales';\r\nimport { calculateGrossProfitBySaleItems, calculateSubtotalBySaleItems, calculateTotalBySale } from '../services/main';\r\nimport { formatNumber } from './utils/index';\r\nimport { layout } from './AddSaleButton';\r\n\r\nconst UPDATE_SALE_MUTATION = gql`\r\n    mutation UPDATE_SALE_MUTATION(\r\n        $id: ID!,\r\n        $saleItems: [SaleItemInput!]!,\r\n        $timestamp: Int!,\r\n        $customerId: String,\r\n        $discountType: SpecialSaleDeductionType,\r\n        $discountValue: String,\r\n        $taxType: SpecialSaleDeductionType,\r\n        $taxValue: String,\r\n        $shipping: String,\r\n        $note: String\r\n    ) {\r\n        updateSaleAndItems(\r\n            id: $id,\r\n            saleItems: $saleItems,\r\n            timestamp: $timestamp,\r\n            customerId: $customerId,\r\n            discountType: $discountType,\r\n            discountValue: $discountValue,\r\n            taxType: $taxType,\r\n            taxValue: $taxValue,\r\n            shipping: $shipping,\r\n            note: $note\r\n        ) {\r\n            id\r\n            timestamp\r\n            customer {\r\n                id\r\n                name\r\n            }\r\n            saleItems {\r\n                quantity\r\n                product {\r\n                    id\r\n                    name\r\n                    salePrice\r\n                    costPrice\r\n                    categories\r\n                }\r\n                salePrice\r\n                costPrice\r\n            }\r\n            discountType\r\n            discountValue\r\n            taxType\r\n            taxValue\r\n            shipping\r\n            note\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\n\r\ninterface PropTypes {\r\n    sale: any; // FIXME how to use graphql types in frontend\r\n    products: any; // FIXME how to use graphql types in frontend\r\n}\r\n\r\ninterface SaleItemProps {\r\n    product: any; // FIXME how to use graphql types in frontend\r\n    salePrice: string;\r\n    costPrice?: string;\r\n    quantity: number;\r\n}\r\n\r\nconst UpdateSaleButton = (props: PropTypes) => {\r\n    const cleanSaleItems = props.sale.saleItems;\r\n    _.each(cleanSaleItems, item => {\r\n        delete item.id;\r\n        delete item.__typename;\r\n    });\r\n    const [modalIsVisible, setModalIsVisible] = React.useState<boolean>();\r\n    const [saleItems, setSaleItems] = React.useState<SaleItemProps[]>(cleanSaleItems);\r\n    const [filteredSaleItems, setFilteredSaleItems] = React.useState<SaleItemProps[]>(cleanSaleItems);\r\n    const [customerId, setCustomerId] = React.useState<string>(props.sale.customer && props.sale.customer.id);\r\n    const [timestamp, setTimestamp] = React.useState<number>(props.sale.timestamp);\r\n    const [discountType, setDiscountType] = React.useState<string>(props.sale.discountType);\r\n    const [discountValue, setDiscountValue] = React.useState<string | null>(props.sale.discountValue);\r\n    const [taxType, setTaxType] = React.useState<string>(props.sale.taxType);\r\n    const [taxValue, setTaxValue] = React.useState<string | null>(props.sale.taxValue);\r\n    const [shipping, setShipping] = React.useState<string | null>(props.sale.shipping);\r\n    const [note, setNote] = React.useState<string>(props.sale.note);\r\n    const [total, setTotal] = React.useState<number>();\r\n    const [form] = Form.useForm();\r\n\r\n    React.useEffect(() => {\r\n        setTotal(calculateTotalBySale({\r\n            saleItems,\r\n            discountType,\r\n            discountValue,\r\n            taxType,\r\n            taxValue,\r\n            shipping,\r\n        }));\r\n    }, [saleItems, discountType, discountValue, taxType, taxValue, shipping]);\r\n\r\n    const [updateSaleAndItems, { loading: updateSaleLoading }] = useMutation(UPDATE_SALE_MUTATION, {\r\n        variables: { id: props.sale.id, saleItems: filteredSaleItems, customerId, timestamp, discountType, discountValue, taxType, taxValue, shipping, note },\r\n        refetchQueries: [{ query: SALES_BY_USER_QUERY }]\r\n    });\r\n\r\n    const saleItemIds = _.map(saleItems, saleItem => saleItem.product.id);\r\n\r\n    const { data: customersByUserData } = useQuery(CUSTOMERS_BY_USER_QUERY);\r\n    const customers = customersByUserData ? customersByUserData.customersByUser : null;\r\n\r\n    const handleProductChange = (saleItem: SaleItemProps, value: string) => {\r\n        const product = JSON.parse(value);\r\n        const updatedSaleItems = [...saleItems];\r\n        const updatedSaleItem: SaleItemProps = { ...saleItem };\r\n        updatedSaleItem.product = product;\r\n        updatedSaleItem.salePrice = product.salePrice;\r\n        updatedSaleItem.costPrice = product.costPrice;\r\n        const index = _.findIndex(updatedSaleItems, saleItem);\r\n        updatedSaleItems.splice(index, 1, updatedSaleItem);\r\n        setSaleItems(updatedSaleItems);\r\n\r\n        const filteredItems: SaleItemProps[] = _.filter(updatedSaleItems, item => item.product.id != null);\r\n        setFilteredSaleItems(filteredItems);\r\n    }\r\n\r\n    const handleQuantityChange = (saleItem: SaleItemProps, value: number | undefined) => {\r\n        const updatedSaleItems = [...saleItems];\r\n        const updatedSaleItem: SaleItemProps = { ...saleItem };\r\n        updatedSaleItem.quantity = value ? value : 1;\r\n        const index = _.findIndex(updatedSaleItems, saleItem);\r\n        updatedSaleItems.splice(index, 1, updatedSaleItem);\r\n        setSaleItems(updatedSaleItems);\r\n\r\n        const filteredItems: SaleItemProps[] = _.filter(updatedSaleItems, item => item.product.id != null);\r\n        setFilteredSaleItems(filteredItems);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title=\"Update Sale Record\"\r\n                visible={modalIsVisible}\r\n                onCancel={() => setModalIsVisible(false)}\r\n                footer={null}\r\n                className='update-sale-modal'\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    labelAlign='left'\r\n                    onFinish={async () => {\r\n                        if (saleItems.length > 0 && saleItems[0].product.id !== null) {\r\n                            await updateSaleAndItems()\r\n                                .then(() => {\r\n                                    setModalIsVisible(false);\r\n                                    form.resetFields();\r\n                                    message.success('Sale record updated');\r\n                                })\r\n                                .catch(res => {\r\n                                    _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                                    message.error('Error: cannot update. Please contact SourceCodeXL.');\r\n                                });\r\n                        } else {\r\n                            message.error('Minimum of one product is required to record a sale');\r\n                        }\r\n                    }}\r\n                >\r\n                    <Form.Item label='Date of Sale' {...layout} rules={[{ required: true, message: 'This field is required' }]}>\r\n                        <DatePicker\r\n                            allowClear={false}\r\n                            value={moment.unix(timestamp)}\r\n                            format={'DD-MM-YYYY'}\r\n                            onChange={(date) => setTimestamp(moment(date as any).unix())}\r\n                            style={{ width: '190px' }}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label='Customer' {...layout}>\r\n                        <Select\r\n                            value={customerId ? customerId : undefined}\r\n                            onChange={setCustomerId}\r\n                            style={{ width: '190px' }}\r\n                        >\r\n                            {\r\n                                _.map(customers, customer => (\r\n                                    <Select.Option key={customer.id} value={customer.id}>{customer.name}</Select.Option>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Divider />\r\n\r\n                    <Form.Item>\r\n                        <Button\r\n                            onClick={() => {\r\n                                const newSaleItems = [...saleItems];\r\n                                newSaleItems.push({\r\n                                    product: {\r\n                                        id: null\r\n                                    },\r\n                                    salePrice: '0',\r\n                                    quantity: 1\r\n                                });\r\n                                setSaleItems(newSaleItems);\r\n                            }}\r\n                            icon={<PlusOutlined />}\r\n                        >Add Product</Button>\r\n                    </Form.Item>\r\n\r\n                    <Table\r\n                        size='small'\r\n                        pagination={false}\r\n                        dataSource={saleItems}\r\n                        rowKey={(saleItem) => (`${saleItem.product.id}-${saleItem.quantity}`)}\r\n                        columns={[\r\n                            {\r\n                                title: 'Product',\r\n                                dataIndex: 'id',\r\n                                render: (value, record) => {\r\n                                    delete record.product.__typename;\r\n                                    return (\r\n                                        <Select\r\n                                            style={{ width: '100%', maxWidth: '180px' }}\r\n                                            value={record.product.id && JSON.stringify(record.product)}\r\n                                            onChange={(value) => handleProductChange(record, value)}\r\n                                            placeholder='Add a product'\r\n                                        >\r\n                                            {\r\n                                                _.map(props.products, product =>\r\n                                                    <Select.Option\r\n                                                        value={JSON.stringify(product)}\r\n                                                        disabled={_.includes(saleItemIds, product.id)}\r\n                                                        key={product.id}\r\n                                                    >\r\n                                                        {product.name}\r\n                                                    </Select.Option>\r\n                                                )\r\n                                            }\r\n                                        </Select>\r\n                                    );\r\n                                }\r\n                            },\r\n                            {\r\n                                title: 'Quantity',\r\n                                dataIndex: 'quantity',\r\n                                render: (value, record) => (\r\n                                    <InputNumber\r\n                                        value={value}\r\n                                        min={1}\r\n                                        onChange={(value) => handleQuantityChange(record, value)}\r\n                                    />\r\n                                )\r\n                            },\r\n                            {\r\n                                title: 'Price',\r\n                                dataIndex: 'salePrice',\r\n                                render: (value) => (\r\n                                    formatNumber(value)\r\n                                ),\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                title: 'Cost',\r\n                                dataIndex: 'costPrice',\r\n                                render: (value) => (\r\n                                    formatNumber(value)\r\n                                ),\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                title: 'Subtotal',\r\n                                dataIndex: 'id',\r\n                                render: (value, record) => (\r\n                                    record.salePrice && record.quantity && formatNumber(parseFloat(Number(parseFloat(record.salePrice) * record.quantity).toFixed(2)))\r\n                                ),\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                title: 'Profit',\r\n                                dataIndex: 'product',\r\n                                render: (value, record) => {\r\n                                    return formatNumber(calculateGrossProfitBySaleItems([record]));\r\n                                },\r\n                                className: 'no-700 align-right'\r\n                            },\r\n                            {\r\n                                title: <div className='no-700'>Remove</div>,\r\n                                dataIndex: 'product',\r\n                                render: (value, record) => (\r\n                                    <span\r\n                                        style={{ 'cursor': 'pointer' }}\r\n                                        onClick={() => {\r\n                                            let newSaleItems = [...saleItems];\r\n                                            newSaleItems = _.filter(newSaleItems, newSaleItem => {\r\n                                                return newSaleItem !== record\r\n                                            });\r\n                                            setSaleItems(newSaleItems);\r\n                                            const filteredItems: SaleItemProps[] = _.filter(newSaleItems, item => item.product.id != null);\r\n                                            setFilteredSaleItems(filteredItems);\r\n                                        }}\r\n                                        aria-label='delete'\r\n                                        role='img'\r\n                                    >❌</span>\r\n                                )\r\n                            }\r\n                        ]}\r\n                        summary={(pageData) => {\r\n                            const pageDataCopy = [...pageData];\r\n                            const totalProfit = calculateGrossProfitBySaleItems(pageDataCopy);\r\n                            const totalSubtotal = calculateSubtotalBySaleItems(pageDataCopy);\r\n                            let totalQuantity = 0;\r\n                            _.each(pageDataCopy, saleItem => totalQuantity += saleItem.quantity);\r\n\r\n                            return (\r\n                                <>\r\n                                    <tr>\r\n                                        <th style={{ padding: '8px' }}>Total</th>\r\n                                        <th style={{ padding: '16px' }}>{formatNumber(totalQuantity)}</th>\r\n                                        <th style={{ padding: '8px' }} className='no-700'></th>\r\n                                        <th style={{ padding: '8px' }} className='no-700'></th>\r\n                                        <th style={{ padding: '8px' }} className='no-700 align-right'><span>{formatNumber(totalSubtotal)}</span></th>\r\n                                        <th style={{ padding: '8px' }} className='no-700 align-right'><span>{formatNumber(totalProfit)}</span></th>\r\n                                        <th style={{ padding: '8px' }}></th>\r\n                                    </tr>\r\n                                </>\r\n                            )\r\n                        }}\r\n                    />\r\n\r\n                    <span>Discount:</span>\r\n                    <div className='deduction-form-row'>\r\n                        <div className='deduction-type-col'>\r\n                            <Form.Item>\r\n                                <Select\r\n                                    defaultValue='FLAT'\r\n                                    style={{ width: '100%' }}\r\n                                    value={discountType}\r\n                                    onChange={(value) => setDiscountType(value)}\r\n                                >\r\n                                    <Select.Option value={'FLAT'} key={'FLAT'}>{'FLAT'}</Select.Option>\r\n                                    <Select.Option value={'PERCENTAGE'} key={'%'}>{'%'}</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </div>\r\n                        <div className='deduction-value-col'>\r\n                            <Form.Item>\r\n                                <InputNumber\r\n                                    value={discountValue ? parseFloat(discountValue) : 0}\r\n                                    onChange={(value) => {\r\n                                        let valueToSet = null;\r\n                                        if (value) {\r\n                                            valueToSet = value.toString();\r\n                                        }\r\n                                        setDiscountValue(valueToSet)\r\n                                    }}\r\n                                />\r\n                            </Form.Item>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <span>Tax:</span>\r\n                    <div className='deduction-form-row'>\r\n                        <div className='deduction-type-col'>\r\n                            <Form.Item>\r\n                                <Select\r\n                                    defaultValue='FLAT'\r\n                                    style={{ width: '100%' }}\r\n                                    value={taxType}\r\n                                    onChange={(value) => setTaxType(value)}\r\n                                >\r\n                                    <Select.Option value={'FLAT'} key={'FLAT'}>{'FLAT'}</Select.Option>\r\n                                    <Select.Option value={'PERCENTAGE'} key={'%'}>{'%'}</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </div>\r\n                        <div className='deduction-value-col'>\r\n                            <Form.Item>\r\n                                <InputNumber\r\n                                    value={taxValue ? parseFloat(taxValue) : 0}\r\n                                    onChange={(value) => {\r\n                                        let valueToSet = null;\r\n                                        if (value) {\r\n                                            valueToSet = value.toString();\r\n                                        }\r\n                                        setTaxValue(valueToSet)\r\n                                    }}\r\n                                />\r\n                            </Form.Item>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Form.Item\r\n                        label='Shipping'\r\n                        {...layout}\r\n                    >\r\n                        <InputNumber\r\n                            value={shipping ? parseFloat(shipping) : 0}\r\n                            onChange={value => {\r\n                                let valueToSet = null;\r\n                                if (value) {\r\n                                    valueToSet = value.toString();\r\n                                }\r\n                                setShipping(valueToSet);\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Divider />\r\n\r\n                    <div>\r\n                        <span className='bold'>TOTAL: {total && formatNumber(total.toFixed(2))}</span>\r\n                    </div>\r\n\r\n                    <Divider />\r\n\r\n                    <Form.Item\r\n                        label=\"Notes\"\r\n                        {...layout}\r\n                    >\r\n                        <Input value={note} onChange={e => setNote(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" disabled={updateSaleLoading} loading={updateSaleLoading} style={{ width: '100%' }}>\r\n                            Updat{updateSaleLoading ? 'ing' : 'e '} Sale Record\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button onClick={() => setModalIsVisible(true)}><span aria-label='edit' role='img'>✏️</span></Button>\r\n        </>\r\n    )\r\n}\r\nexport default UpdateSaleButton;","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Table, Divider } from 'antd';\r\n\r\nimport { calculateGrossProfitBySaleItems, calculateProfitBySale, calculateSubtotalBySaleItems, calculateTotalBySale } from '../services/main';\r\nimport { formatNumber } from './utils/index';\r\nimport UpdateSaleButton from './UpdateSaleButton';\r\nimport DeleteButton from './DeleteButton';\r\n\r\ninterface PropTypes {\r\n    sale: any; // FIXME use sale interface from graphql\r\n    products: any; // FIXME how to use graphql types in frontend\r\n    setIdForDeletion: (id: string) => void;\r\n    onDelete: () => void\r\n}\r\n\r\nconst SaleDetails = (props: PropTypes) => {\r\n    const renderDiscount = () => {\r\n        if (props.sale.discountType && props.sale.discountValue) {\r\n            if (props.sale.discountType === 'FLAT') {\r\n                return props.sale.discountValue;\r\n            }\r\n            return `${props.sale.discountValue} %`\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const renderTax = () => {\r\n        if (props.sale.taxType && props.sale.taxValue) {\r\n            if (props.sale.taxType === 'FLAT') {\r\n                return props.sale.taxValue;\r\n            }\r\n            return `${props.sale.taxValue} %`;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div key={props.sale.id}>\r\n            <div className='bring-900'>\r\n                <p>\r\n                    <UpdateSaleButton sale={props.sale} products={props.products} />\r\n                    <DeleteButton\r\n                        className='btn-add-margin-left'\r\n                        onClick={() => props.setIdForDeletion(props.sale.id)}\r\n                        onDelete={props.onDelete}\r\n                    />\r\n                </p>\r\n            </div>\r\n            <div className='bold'><p>SALE DETAILS:</p></div>\r\n            {\r\n                props.sale && (<>\r\n                    <Table\r\n                        className='no-550'\r\n                        size='small'\r\n                        pagination={false}\r\n                        dataSource={props.sale.saleItems}\r\n                        rowKey={(saleItem) => (`${saleItem.product.id}-${saleItem.quantity}`)}\r\n                        columns={[\r\n                            {\r\n                                title: 'Product',\r\n                                dataIndex: 'id',\r\n                                render: (value, record) => (\r\n                                    record.product.name\r\n                                )\r\n                            },\r\n                            {\r\n                                title: 'Quantity',\r\n                                dataIndex: 'quantity',\r\n                                render: (value) => (formatNumber(value))\r\n                            },\r\n                            {\r\n                                title:  <div className='align-right'>Price</div>,\r\n                                dataIndex: 'salePrice',\r\n                                render: (value) => (formatNumber(value)),\r\n                                className: 'align-right'\r\n                            },\r\n                            {\r\n                                title: <div className='align-right'>Cost</div>,\r\n                                dataIndex: 'costPrice',\r\n                                render: (value) => (formatNumber(value)),\r\n                                className: 'align-right'\r\n                            },\r\n                            {\r\n                                title: <div className='align-right'>Subtotal</div>,\r\n                                dataIndex: 'id',\r\n                                render: (value, record) => {\r\n                                    return formatNumber(calculateSubtotalBySaleItems([record]));\r\n                                },\r\n                                className: 'align-right'\r\n                            },\r\n                            {\r\n                                title: <div className='align-right'>Profit</div>,\r\n                                dataIndex: 'product',\r\n                                render: (value, record) => {\r\n                                    return formatNumber(calculateGrossProfitBySaleItems([record]));\r\n                                },\r\n                                className: 'align-right'\r\n                            }\r\n                        ]}\r\n                        summary={(pageData) => {\r\n                            const pageDataCopy = [...pageData];\r\n                            const totalProfit = calculateGrossProfitBySaleItems(pageDataCopy);\r\n                            const totalSubtotal = calculateSubtotalBySaleItems(pageDataCopy);\r\n                            let totalQuantity: number = 0;\r\n                            _.each(pageDataCopy, saleItem => {\r\n                                totalQuantity += saleItem.quantity;\r\n                            });\r\n\r\n                            return (\r\n                                <>\r\n                                    <tr>\r\n                                        <th style={{ padding: '8px' }}>Total</th>\r\n                                        <th style={{ padding: '8px' }}>{formatNumber(totalQuantity)}</th>\r\n                                        <th style={{ padding: '8px' }}></th>\r\n                                        <th style={{ padding: '8px' }}></th>\r\n                                        <th style={{ padding: '8px' }} className='align-right'>{formatNumber(totalSubtotal)}</th>\r\n                                        <th style={{ padding: '8px' }} className='align-right'>{formatNumber(totalProfit)}</th>\r\n                                    </tr>\r\n                                </>\r\n                            )\r\n                        }}\r\n                    />\r\n\r\n                    <div className='bring-550'>\r\n                        {\r\n                            _.map(props.sale.saleItems, saleItem => (\r\n                                <div className='sale-details-product-mobile' key={`${saleItem.product.id}-${saleItem.quantity}`}>\r\n                                    <b>{saleItem.product.name}</b>\r\n                                    <div className='summary-row'>\r\n                                        <span>Quantity:</span> <span>{formatNumber(saleItem.quantity)}</span>\r\n                                    </div>\r\n                                    <div className='summary-row'>\r\n                                        <span className='align-right'>Price:</span> <span>{formatNumber(saleItem.salePrice)}</span>\r\n                                    </div>\r\n                                    <div className='summary-row'>\r\n                                        <span className='align-right'>Cost:</span> <span>{formatNumber(saleItem.costPrice)}</span>\r\n                                    </div>\r\n                                    <div className='summary-row'>\r\n                                        <span className='align-right'>Subtotal:</span> <span>{formatNumber(calculateSubtotalBySaleItems([saleItem]))}</span>\r\n                                    </div>\r\n                                    <div className='summary-row'>\r\n                                        <span className='align-right'>Profit:</span> <span>{formatNumber(calculateGrossProfitBySaleItems([saleItem]))}</span>\r\n                                    </div>\r\n                                    <Divider />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div className='summary-row'>\r\n                            <span>SUBTOTAL:</span> <span>{formatNumber(calculateSubtotalBySaleItems(props.sale.saleItems))}</span>\r\n                        </div>\r\n                        <div className='summary-row'>\r\n                            <span>DISCOUNT:</span> <span>{renderDiscount()}</span>\r\n                        </div>\r\n                        <div className='summary-row'>\r\n                            <span>TAX:</span> <span>{renderTax()}</span>\r\n                        </div>\r\n                        <div className='summary-row'>\r\n                            <span>SHIPPING:</span> <span>{props.sale.shipping}</span>\r\n                        </div>\r\n                        <div className='summary-row bold' style={{ marginTop: '.5em' }}>\r\n                            <span>TOTAL:</span> <span>{formatNumber(calculateTotalBySale(props.sale))}</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Divider />\r\n\r\n                    <div>\r\n                        <div className='summary-row-last'>\r\n                            <span>SUB-PROFIT:</span> <span>{formatNumber(calculateGrossProfitBySaleItems(props.sale.saleItems))}</span>\r\n                            <span>(products prices minus costs)</span>\r\n                        </div>\r\n                        <div className='summary-row-last' style={{ marginTop: '.5em' }}>\r\n                            <span>PROFIT:</span> <span>{formatNumber(calculateProfitBySale(props.sale))}</span>\r\n                            <span>(minus discount)</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='bring-550'>\r\n                        <Divider />\r\n                        <div>CUSTOMER: {props.sale.customer?.name}</div>\r\n                    </div>\r\n\r\n                    <Divider />\r\n\r\n                    <div>NOTE: {props.sale.note}</div>\r\n                </>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default SaleDetails;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport moment from 'moment';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Table, message, Tag } from 'antd';\r\nimport { RightSquareTwoTone, DownSquareTwoTone } from '@ant-design/icons';\r\n\r\nimport { userContext } from './App';\r\nimport AddSaleButton from './AddSaleButton';\r\nimport UpdateSaleButton from './UpdateSaleButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport SaleDetails from './SaleDetails';\r\nimport { paginationConfig } from './configs';\r\nimport { calculateProfitBySale, calculateSubtotalBySaleItems, calculateTotalBySale } from '../services/main';\r\nimport { sortByProperty, getColumnSearchProps, formatNumber } from './utils/index';\r\n\r\nconst PRODUCTS_BY_USER_QUERY = gql`\r\n    {\r\n        productsByUser {\r\n            id\r\n            name\r\n            salePrice\r\n            costPrice\r\n            categories\r\n        }\r\n    }\r\n`;\r\n\r\nconst SALES_BY_USER_QUERY = gql`\r\n    {\r\n        salesByUser(orderBy: timestamp_DESC) {\r\n            id\r\n            timestamp\r\n            customer {\r\n                id\r\n                name\r\n            }\r\n            saleItems {\r\n                quantity\r\n                product {\r\n                    id\r\n                    name\r\n                    salePrice\r\n                    costPrice\r\n                    categories\r\n                }\r\n                salePrice\r\n                costPrice\r\n            }\r\n            discountType\r\n            discountValue\r\n            taxType\r\n            taxValue\r\n            shipping\r\n            note\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst DELETE_SALE_AND_ITEMS_MUTATION = gql`\r\n    mutation DELETE_SALE_AND_ITEMS_MUTATION($id: ID!) {\r\n        deleteSaleAndItems(id: $id) {\r\n            id\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst Sales = () => {\r\n    const [idForDeletion, setIdForDeletion] = React.useState<string>();\r\n\r\n    const { data: salesData, loading } = useQuery(SALES_BY_USER_QUERY, {\r\n        fetchPolicy: 'network-only'\r\n    });\r\n    let sales: any;\r\n    if (salesData) {\r\n        sales = _.sortBy(salesData.salesByUser, 'timestamp').reverse();\r\n    } else {\r\n        sales = null;\r\n    }\r\n\r\n    const [deleteSaleAndItems] = useMutation(DELETE_SALE_AND_ITEMS_MUTATION, {\r\n        variables: { id: idForDeletion },\r\n        update: (cache: any, payload: any) => {\r\n            const data = cache.readQuery({ query: SALES_BY_USER_QUERY });\r\n            const filteredItems = _.filter(data.salesByUser, item => item.id !== payload.data.deleteSaleAndItems.id);\r\n            cache.writeQuery({ query: SALES_BY_USER_QUERY, data: { salesByUser: filteredItems } });\r\n        }\r\n    });\r\n\r\n    const { data: productsByUserData } = useQuery(PRODUCTS_BY_USER_QUERY);\r\n    const products = productsByUserData ? productsByUserData.productsByUser : [];\r\n    _.each(products, product => {\r\n        delete product.__typename;\r\n    });\r\n\r\n    // const handleExportClick = () => {\r\n    //     window.print();\r\n    // }\r\n\r\n    const onSaleDelete = async () => {\r\n        message.info('Please wait...');\r\n        await deleteSaleAndItems()\r\n            .then(() => {\r\n                message.success('Sale record deleted');\r\n            })\r\n            .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot delete. Please contact SourceCodeXL.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <userContext.Consumer>\r\n            {value => {\r\n                if (!value) {\r\n                    return <p className='retain-margin'>You must be logged in to access this page.</p>\r\n                }\r\n                if (value && !value.verified) {\r\n                    return <p className='retain-margin'>Your email must be verified to access this page.</p>\r\n                }\r\n                return (\r\n                    <>\r\n                        <AddSaleButton products={products} />\r\n\r\n                        {/*<Tooltip title=\"Choose 'Save as PDF' under 'Destination' in the next window\">\r\n                            <DownloadButton title='Download PDF' onClick={handleExportClick} size='large' />\r\n                        </Tooltip>*/}\r\n                        <div id='section-to-print'>\r\n                            <Table\r\n                                bordered\r\n                                loading={loading}\r\n                                dataSource={sales}\r\n                                rowKey='id'\r\n                                className='sales-table'\r\n                                rowClassName='sales-table-row'\r\n                                expandable={{\r\n                                    expandedRowRender: record => <SaleDetails sale={record} products={products} setIdForDeletion={setIdForDeletion} onDelete={onSaleDelete} />,\r\n                                    expandIcon: ({ expanded, onExpand, record }) => (\r\n                                        expanded ? <DownSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide' />\r\n                                            : <RightSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide' />\r\n                                    )\r\n                                }}\r\n                                pagination={paginationConfig}\r\n                                columns={[\r\n                                    {\r\n                                        title: 'Date',\r\n                                        dataIndex: 'timestamp',\r\n                                        render: (value) => {\r\n                                            return moment.unix(value).format(\"DD MMMM YYYY\");\r\n                                        },\r\n                                        sorter: (a, b) => {\r\n                                            return sortByProperty(a, b, 'timestamp');\r\n                                        },\r\n                                        ...getColumnSearchProps('timestamp')\r\n                                    },\r\n                                    {\r\n                                        title: 'Products',\r\n                                        dataIndex: 'saleItems',\r\n                                        render: (value) => {\r\n                                            return _.map(value, saleItem => {\r\n                                                const maxLength = 22;\r\n                                                const productName = saleItem.product.name.length > maxLength ? saleItem.product.name.substring(0, maxLength).concat('...') : saleItem.product.name;\r\n                                                return <Tag key={saleItem.product.name}>{productName}</Tag>\r\n                                            })\r\n                                        },\r\n                                        ...getColumnSearchProps('saleItems')\r\n                                    },\r\n                                    {\r\n                                        title: 'Subtotal',\r\n                                        dataIndex: 'saleItems',\r\n                                        render: (value) => {\r\n                                            const subtotal = calculateSubtotalBySaleItems(value);\r\n                                            return <p className='align-right'>{formatNumber(subtotal)}</p>\r\n                                        },\r\n                                        sorter: (a, b) => {\r\n                                            const subtotalA = calculateSubtotalBySaleItems(a.saleItems);\r\n                                            const subtotalB = calculateSubtotalBySaleItems(b.saleItems);\r\n                                            return subtotalA - subtotalB;\r\n                                        },\r\n                                        ...getColumnSearchProps('subtotal'),\r\n                                        className: 'no-1300'\r\n                                    },\r\n                                    {\r\n                                        title: 'Total',\r\n                                        dataIndex: 'id',\r\n                                        render: (value, record) => {\r\n                                            const total = calculateTotalBySale(record);\r\n                                            return <p className='align-right'>{formatNumber(total)}</p>\r\n                                        },\r\n                                        sorter: (a, b) => {\r\n                                            const totalA = calculateTotalBySale(a);\r\n                                            const totalB = calculateTotalBySale(b);\r\n                                            return totalA - totalB;\r\n                                        },\r\n                                        ...getColumnSearchProps('total'),\r\n                                        className: 'no-900'\r\n                                    },\r\n                                    {\r\n                                        title: 'Profit',\r\n                                        dataIndex: 'saleItems',\r\n                                        render: (value, record) => {\r\n                                            const profit = calculateProfitBySale(record);\r\n                                            return <p className='align-right'>{formatNumber(profit)}</p>\r\n                                        },\r\n                                        sorter: (a, b) => {\r\n                                            const profitA = calculateProfitBySale(a);\r\n                                            const profitB = calculateProfitBySale(b);\r\n                                            return profitA - profitB;\r\n                                        },\r\n                                        ...getColumnSearchProps('profit'),\r\n                                        className: 'no-1300'\r\n                                    },\r\n                                    {\r\n                                        title: 'Customer',\r\n                                        dataIndex: 'customer',\r\n                                        render: (value) => {\r\n                                            if (value) {\r\n                                                return value.name;\r\n                                            }\r\n                                            return null;\r\n                                        },\r\n                                        sorter: (a, b) => {\r\n                                            return sortByProperty(a, b, 'customer');\r\n                                        },\r\n                                        ...getColumnSearchProps('customer'),\r\n                                        className: 'no-1300'\r\n                                    },\r\n                                    {\r\n                                        title: <div className='section-to-hide'>Edit</div>,\r\n                                        dataIndex: 'id',\r\n                                        key: 'edit',\r\n                                        render: (value, record) => {\r\n                                            return (\r\n                                                <div className='section-to-hide'>\r\n                                                    <UpdateSaleButton sale={record} products={products} />\r\n                                                </div>\r\n                                            );\r\n                                        },\r\n                                        className: 'no-900'\r\n                                    },\r\n                                    {\r\n                                        title: <div className='section-to-hide'>Delete</div>,\r\n                                        dataIndex: 'id',\r\n                                        key: 'edit',\r\n                                        render: (value) => {\r\n                                            return (\r\n                                                <div className='section-to-hide'>\r\n                                                    <DeleteButton\r\n                                                        onClick={() => setIdForDeletion(value)}\r\n                                                        onDelete={onSaleDelete}\r\n                                                    />\r\n                                                </div>\r\n                                            );\r\n                                        },\r\n                                        className: 'no-900'\r\n                                    }\r\n                                ]}\r\n                                summary={(pageData) => {\r\n                                    let subtotal = 0;\r\n                                    let total = 0;\r\n                                    let profit = 0;\r\n                                    _.each(pageData, sale => {\r\n                                        const saleSubTotal = calculateSubtotalBySaleItems(sale.saleItems);\r\n                                        subtotal += saleSubTotal;\r\n                                        const saleTotal = calculateTotalBySale(sale);\r\n                                        total += saleTotal;\r\n                                        const saleProfit = calculateProfitBySale(sale);\r\n                                        profit += saleProfit;\r\n                                    });\r\n\r\n                                    return (\r\n                                        <>\r\n                                            <tr>\r\n                                                <th style={{ padding: '8px' }} className='no-900'>Total</th>\r\n                                                <th style={{ padding: '8px' }} className='no-900 section-to-hide'></th>\r\n                                                <th style={{ padding: '8px' }} className='no-900'></th>\r\n                                                <th style={{ padding: '8px' }} className='no-1300 align-right'>{formatNumber(subtotal.toFixed(2))}</th>\r\n                                                <th style={{ padding: '8px' }} className='no-900 align-right'>{formatNumber(total.toFixed(2))}</th>\r\n                                                <th style={{ padding: '8px' }} className='no-1300 align-right'>{formatNumber(profit.toFixed(2))}</th>\r\n                                                <th style={{ padding: '8px' }} className='no-1300'></th>\r\n                                                <th className='no-900'></th>\r\n                                                <th className='no-900'></th>\r\n                                            </tr>\r\n                                        </>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                );\r\n            }}\r\n        </userContext.Consumer>\r\n    );\r\n}\r\nexport default Sales;\r\nexport { SALES_BY_USER_QUERY };","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport moment from 'moment';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Modal, Button, Input, Form, message, InputNumber, DatePicker } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { EXPENSES_BY_USER_QUERY } from './Expenses';\r\nimport { layout, tailLayout } from './AddProductButton';\r\n\r\nconst CREATE_EXPENSE_MUTATION = gql`\r\nmutation CREATE_EXPENSE_MUTATION(\r\n    $name: String!\r\n    $description: String\r\n    $cost: String!\r\n    $timestamp: Int!\r\n) {\r\n    createExpense(\r\n        name: $name\r\n        description: $description\r\n        cost: $cost\r\n        timestamp: $timestamp\r\n    ) {\r\n        id\r\n        name\r\n        description\r\n        cost\r\n        timestamp\r\n        createdAt\r\n    }\r\n}\r\n`;\r\n\r\nconst AddInventoryButton = () => {\r\n    const [name, setName] = React.useState<string>();\r\n    const [description, setDescription] = React.useState<string>();\r\n    const [cost, setCost] = React.useState<string>();\r\n    const [timestamp, setTimestamp] = React.useState<number>(moment().unix());\r\n    const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createExpense, { loading }] = useMutation(CREATE_EXPENSE_MUTATION, {\r\n        variables: { name, description, cost, timestamp },\r\n        update: (store, response) => {\r\n            let newData = response.data.createExpense;\r\n            let localStoreData: any = store.readQuery({ query: EXPENSES_BY_USER_QUERY });\r\n            localStoreData = { expensesByUser: _.sortBy([...localStoreData.expensesByUser, newData], 'createdAt').reverse() };\r\n            store.writeQuery({ query: EXPENSES_BY_USER_QUERY, data: localStoreData });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Modal title='Add an Expense' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n                <Form {...layout} form={form} onFinish={async () => {\r\n                    await createExpense()\r\n                        .then(() => {\r\n                            setIsShowingModal(false);\r\n                            form.resetFields();\r\n                            message.success('Expense added');\r\n                        })\r\n                        .catch(res => {\r\n                            _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                        });\r\n                }}>\r\n                    <Form.Item\r\n                        label='Date' {...layout}\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <DatePicker\r\n                            allowClear={false}\r\n                            format={'DD-MM-YYYY'}\r\n                            value={moment.unix(timestamp)}\r\n                            onChange={(date) => setTimestamp(moment(date as any).unix())}\r\n                            style={{ width: '190px' }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <Input value={name} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Description\"\r\n                        name=\"description\"\r\n                    >\r\n                        <Input value={description} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDescription(e.target.value)} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Cost\"\r\n                        name=\"cost\"\r\n                        rules={[{ required: true, message: 'This field is required' }]}\r\n                    >\r\n                        <InputNumber\r\n                            value={cost ? parseFloat(cost) : 0}\r\n                            onChange={(value) => {\r\n                                if (value) {\r\n                                    setCost(value.toString())\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ width: '100%' }}>Add{loading ? 'ing ' : ' '} Expense</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button\r\n                onClick={() => setIsShowingModal(true)}\r\n                size='large'\r\n                icon={<PlusOutlined />}\r\n                className='add-button btn-add-margin-left'\r\n            >\r\n                <span className='no-550'>Add Expense</span>\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddInventoryButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport moment from 'moment';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Button, Input, Form, Modal, message, InputNumber, DatePicker } from 'antd';\r\n\r\nimport { layout, tailLayout } from './AddProductButton';\r\nimport { EXPENSES_BY_USER_QUERY } from './Expenses';\r\n\r\ninterface PropTypes {\r\n  expense: any; // FIXME how to use GraphQL types on frontend?\r\n}\r\n\r\nconst UPDATE_EXPENSE_MUTATION = gql`\r\n    mutation UPDATE_EXPENSE_MUTATION(\r\n        $id: ID!\r\n        $name: String\r\n        $description: String\r\n        $cost: String\r\n        $timestamp: Int!\r\n    ) {\r\n      updateExpense(\r\n            id: $id\r\n            name: $name\r\n            description: $description\r\n            cost: $cost\r\n            timestamp: $timestamp\r\n        ) {\r\n            id\r\n            name\r\n            description\r\n            cost\r\n            timestamp\r\n        }\r\n    }\r\n`;\r\n\r\nconst UpdateExpenseButton = (props: PropTypes) => {\r\n  const [name, setName] = React.useState<string>();\r\n  const [description, setDescription] = React.useState<string>();\r\n  const [cost, setCost] = React.useState<string>();\r\n  const [timestamp, setTimestamp] = React.useState<number>(props.expense.timestamp);\r\n  const [isShowingModal, setIsShowingModal] = React.useState<boolean>(false);\r\n\r\n  const [updateExpense, { loading }] = useMutation(UPDATE_EXPENSE_MUTATION, {\r\n    variables: { id: props.expense.id, name, description, cost, timestamp },\r\n    refetchQueries: [{ query: EXPENSES_BY_USER_QUERY }]\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal title='Update Expense' visible={isShowingModal} onCancel={() => setIsShowingModal(false)} footer={null}>\r\n        <Form\r\n          {...layout}\r\n          initialValues={{\r\n            name: props.expense.name,\r\n            description: props.expense.description,\r\n            cost: parseFloat(props.expense.cost)\r\n          }}\r\n          onFinish={async e => {\r\n            await updateExpense()\r\n              .then(() => {\r\n                message.success('Expense updated');\r\n                setIsShowingModal(false);\r\n              })\r\n              .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot update. Please contact SourceCodeXL.');\r\n              });\r\n          }}\r\n        >\r\n          <Form.Item\r\n            label='Date' {...layout}\r\n          >\r\n            <DatePicker\r\n              allowClear={false}\r\n              format={'DD-MM-YYYY'}\r\n              value={moment.unix(timestamp)}\r\n              onChange={(date) => setTimestamp(moment(date as any).unix())}\r\n              style={{ width: '190px' }}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n          >\r\n            <Input onChange={e => setName(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Description\"\r\n            name=\"description\"\r\n          >\r\n            <Input onChange={e => setDescription(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Cost\"\r\n            name=\"cost\"\r\n          >\r\n            <InputNumber onChange={value => value && setCost(value.toString())} />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={loading} loading={loading} style={{ width: '100%' }}>Updat{loading ? 'ing' : 'e'} Expense</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n      <Button onClick={() => setIsShowingModal(true)}><span aria-label='edit' role='img'>✏️</span></Button>\r\n    </>\r\n  )\r\n}\r\nexport default UpdateExpenseButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport moment from 'moment';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { Table, message } from 'antd';\r\nimport { RightSquareTwoTone, DownSquareTwoTone } from '@ant-design/icons';\r\n\r\nimport { userContext } from './App';\r\nimport AddExpenseButton from './AddExpenseButton';\r\nimport UpdateExpenseButton from './UpdateExpenseButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport withWindowDimension from './withWindowDimenstions';\r\nimport { paginationConfig } from './configs';\r\n\r\nimport { sortByProperty, getColumnSearchProps, formatNumber } from './utils/index';\r\n\r\nconst EXPENSES_BY_USER_QUERY = gql`\r\n    {\r\n        expensesByUser(orderBy: timestamp_DESC) {\r\n            id\r\n            name\r\n            description\r\n            cost\r\n            timestamp\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst DELETE_EXPENSE_MUTATION = gql`\r\n    mutation DELETE_EXPENSE_MUTATION($id: ID!) {\r\n        deleteExpense(id: $id) {\r\n            id\r\n            name\r\n            description\r\n            cost\r\n            timestamp\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Properties {\r\n    windowWidth: number;\r\n}\r\nconst Expenses = (props: Properties) => {\r\n    const [idForDeletion, setIdForDeletion] = React.useState<string>();\r\n\r\n    const { data, loading } = useQuery(EXPENSES_BY_USER_QUERY);\r\n    const expenses = data ? data.expensesByUser : null;\r\n\r\n    // TODO move to projections\r\n    const [deleteExpense] = useMutation(DELETE_EXPENSE_MUTATION, {\r\n        variables: { id: idForDeletion },\r\n        update: (cache: any, payload: any) => {\r\n            const data = cache.readQuery({ query: EXPENSES_BY_USER_QUERY });\r\n            const filteredItems = _.filter(data.expensesByUser, expense => expense.id !== payload.data.deleteExpense.id);\r\n            cache.writeQuery({ query: EXPENSES_BY_USER_QUERY, data: { expensesByUser: filteredItems } });\r\n        }\r\n    });\r\n\r\n    interface ExpenseDetailsPropsInterface {\r\n        expense: any; // FIXME use sale interface from graphql\r\n        setIdForDeletion: (id: string) => void;\r\n        onDelete: () => void;\r\n    }\r\n    const ExpenseDetails = (expenseDetailsProps: ExpenseDetailsPropsInterface) => {\r\n        const { name, description, cost } = expenseDetailsProps.expense;\r\n        return (\r\n            <div className='expense-detail-mobile bring-750'>\r\n                <div className='bring-550'>\r\n                    <p>\r\n                        <UpdateExpenseButton expense={expenseDetailsProps.expense} />\r\n                        <DeleteButton\r\n                            className='btn-add-margin-left'\r\n                            onClick={() => expenseDetailsProps.setIdForDeletion(expenseDetailsProps.expense.id)}\r\n                            onDelete={onExpenseDelete}\r\n                        />\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <div className='summary-row'>\r\n                        <span>Name:</span> <span>{name}</span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Description:</span> <span>{description}</span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Cost:</span> <span>{cost}</span>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onExpenseDelete = React.useCallback(async () => {\r\n        message.info('Please wait...');\r\n        await deleteExpense()\r\n            .then(() => {\r\n                message.success('Expense deleted');\r\n            })\r\n            .catch(res => {\r\n                _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                message.error('Error: cannot delete. Please contact SourceCodeXL.');\r\n            });\r\n    }, [deleteExpense]);\r\n\r\n    const expandableConfig = React.useMemo(() => {\r\n        if (props.windowWidth >= 751) {\r\n            return undefined;\r\n        } else {\r\n            return {\r\n                expandedRowRender: (record: any) => <ExpenseDetails expense={record} setIdForDeletion={setIdForDeletion} onDelete={onExpenseDelete} />,\r\n                expandIcon: (props: any) => {\r\n                    const { expanded, onExpand, record } = props;\r\n                    return (\r\n                        expanded ? <DownSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-750' />\r\n                            : <RightSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-750' />\r\n                    )\r\n                }\r\n            }\r\n\r\n        }\r\n    }, [props.windowWidth, onExpenseDelete]);\r\n\r\n    return (\r\n        <userContext.Consumer>\r\n            {value => {\r\n                if (!value) {\r\n                    return <p className='retain-margin'>You must be logged in to access this page.</p>\r\n                }\r\n                if (value && !value.verified) {\r\n                    return <p className='retain-margin'>Your email must be verified to access this page.</p>\r\n                }\r\n                return (\r\n                    <>\r\n                        <AddExpenseButton />\r\n                        <Table\r\n                            bordered\r\n                            loading={loading}\r\n                            dataSource={expenses}\r\n                            rowKey='id'\r\n                            expandable={expandableConfig}\r\n                            pagination={paginationConfig}\r\n                            columns={[\r\n                                {\r\n                                    title: 'Date',\r\n                                    dataIndex: 'timestamp',\r\n                                    render: (value) => {\r\n                                        return moment.unix(value).format(\"DD MMMM YYYY\");\r\n                                    },\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'timestamp');\r\n                                    },\r\n                                    ...getColumnSearchProps('timestamp')\r\n                                },\r\n                                {\r\n                                    title: 'Name',\r\n                                    dataIndex: 'name',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'name');\r\n                                    },\r\n                                    ...getColumnSearchProps('name')\r\n                                },\r\n                                {\r\n                                    title: 'Description',\r\n                                    dataIndex: 'description',\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'description');\r\n                                    },\r\n                                    ...getColumnSearchProps('description'),\r\n                                    className: 'no-750'\r\n                                },\r\n                                {\r\n                                    title: 'Cost',\r\n                                    dataIndex: 'cost',\r\n                                    render: (value) => {\r\n                                        return <p className='align-right'>{formatNumber(value)}</p>;\r\n                                    },\r\n                                    sorter: (a, b) => {\r\n                                        return sortByProperty(a, b, 'cost');\r\n                                    },\r\n                                    ...getColumnSearchProps('cost')\r\n                                },\r\n                                {\r\n                                    title: 'Edit',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value, record) => {\r\n                                        return (\r\n                                            <UpdateExpenseButton expense={record} />\r\n                                        );\r\n                                    },\r\n                                    className: 'no-550'\r\n                                },\r\n                                {\r\n                                    title: 'Delete ',\r\n                                    dataIndex: 'id',\r\n                                    key: 'edit',\r\n                                    render: (value) => {\r\n                                        return (\r\n                                            <DeleteButton\r\n                                                onClick={() => setIdForDeletion(value)}\r\n                                                onDelete={onExpenseDelete}\r\n                                            />\r\n                                        );\r\n                                    },\r\n                                    className: 'no-550'\r\n                                }\r\n                            ]}\r\n                            summary={(pageData) => {\r\n                                let totalCost = 0;\r\n                                _.each(pageData, expense => totalCost += parseFloat(expense.cost));\r\n\r\n                                return (\r\n                                    <>\r\n                                        <tr>\r\n                                            <th style={{ padding: '8px' }}>Total</th>\r\n                                            <th style={{ padding: '8px' }}></th>\r\n                                            <th style={{ padding: '8px' }}></th>\r\n                                            <th style={{ padding: '8px' }} className='align-right'>{formatNumber(totalCost.toFixed(2))}</th>\r\n                                            <th className='no-550'></th>\r\n                                            <th className='no-550'></th>\r\n                                        </tr>\r\n                                    </>\r\n                                )\r\n                            }}\r\n                        />\r\n                    </>\r\n                );\r\n            }}\r\n        </userContext.Consumer>\r\n    );\r\n}\r\nexport default withWindowDimension(Expenses);\r\nexport { EXPENSES_BY_USER_QUERY };","import React from 'react';\r\nimport moment from 'moment';\r\nimport * as _ from 'lodash';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { DatePicker, Table, Tag, Card, Row, Col } from 'antd';\r\nimport { RightSquareTwoTone, DownSquareTwoTone } from '@ant-design/icons';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nimport { userContext } from './App';\r\n\r\nimport { SALES_BY_USER_QUERY } from './Sales';\r\nimport { EXPENSES_BY_USER_QUERY } from './Expenses';\r\n\r\nimport {\r\n    calculateProfitByDateRange, calculateExpensesByDateRange, calculateUnitsSoldByDateRange, getMonthlyProfitExpensesByDateRange, getTopSellingProductsByDateRange, getTopSellingCategoriesByDateRange, getTopCustomersByDateRange,\r\n    TopSellingCustomerInterface\r\n} from '../services/main';\r\nimport { sortByProperty, formatNumber } from './utils';\r\nimport withWindowDimension from './withWindowDimenstions';\r\n\r\ninterface Properties {\r\n    windowWidth: number;\r\n}\r\nconst Reports = (props: Properties) => {\r\n    const { data: salesData, } = useQuery(SALES_BY_USER_QUERY);\r\n    const sales = salesData ? salesData.salesByUser : null;\r\n\r\n    const { data: expensesData } = useQuery(EXPENSES_BY_USER_QUERY);\r\n    const expenses = expensesData ? expensesData.expensesByUser : null;\r\n\r\n\r\n    const [startDate, setStartDate] = React.useState<moment.Moment>(moment().startOf('year'));\r\n    const [endDate, setEndDate] = React.useState<moment.Moment>(moment().endOf('month'));\r\n\r\n    const datePickerFormat = 'DD MMMM YYYY';\r\n\r\n    const topCustomersExpandableConfig = React.useMemo(() => {\r\n        if (props.windowWidth >= 656) {\r\n            return undefined;\r\n        } else {\r\n            return {\r\n                expandedRowRender: (record: any) => <TopCustomerRowDetails rowData={record} />,\r\n                expandIcon: (props: any) => {\r\n                    const { expanded, onExpand, record } = props;\r\n                    return (\r\n                        expanded ? <DownSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-655' />\r\n                            : <RightSquareTwoTone onClick={e => onExpand(record, e)} style={{ fontSize: '18pt' }} className='section-to-hide bring-655' />\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }, [props.windowWidth]);\r\n    interface TopCustomerRowDetailsPropsInterface {\r\n        rowData: TopSellingCustomerInterface;\r\n    }\r\n    const TopCustomerRowDetails = (rowDetailsProps: TopCustomerRowDetailsPropsInterface) => {\r\n        const { transactions, units } = rowDetailsProps.rowData;\r\n        return (\r\n            <div className='top-customer-detail-mobile'>\r\n                <div>\r\n                    <div className='summary-row'>\r\n                        <span>Transactions:</span> <span>{formatNumber(transactions)}</span>\r\n                    </div>\r\n                    <div className='summary-row'>\r\n                        <span>Units Bought:</span> <span>{formatNumber(units)}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='reports-wrapper'>\r\n            <userContext.Consumer>\r\n                {value => {\r\n                    if (!value) {\r\n                        return <p>You must be logged in to access this page.</p>\r\n                    }\r\n                    if (value && !value.verified) {\r\n                        return <p>Your email must be verified to access this page.</p>\r\n                    }\r\n\r\n                    const startDateUnix = startDate.unix();\r\n                    const endDateUnix = endDate.unix();\r\n                    const calculatedProfitByDateRange = calculateProfitByDateRange(sales, startDateUnix, endDateUnix);\r\n                    const calculatedExpensesByDateRange = calculateExpensesByDateRange(expenses, startDateUnix, endDateUnix);\r\n                    const monthlyProfitExpensesByDateRange = getMonthlyProfitExpensesByDateRange(sales, expenses, startDate, endDate);\r\n                    const topSellingProductsByDateRange = getTopSellingProductsByDateRange(sales, startDateUnix, endDateUnix, 10);\r\n                    const topSellingCategoriesByDateRange = getTopSellingCategoriesByDateRange(sales, startDateUnix, endDateUnix, 10)\r\n                    const topCustomersByDateRange = getTopCustomersByDateRange(sales, startDateUnix, endDateUnix, 10);\r\n\r\n                    return (\r\n                        <>\r\n                            <div className='date-range-container'>\r\n                                <div className='datepicker-container'>\r\n                                    <DatePicker\r\n                                        format={datePickerFormat}\r\n                                        value={startDate}\r\n                                        onChange={(value) => {\r\n                                            const valueToSet = value ? value : moment();\r\n                                            setStartDate(valueToSet);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <span className='date-range-dash'>-</span>\r\n                                <div className='datepicker-container'>\r\n                                    <DatePicker\r\n                                        format={datePickerFormat}\r\n                                        value={endDate}\r\n                                        onChange={(value) => {\r\n                                            const valueToSet = value ? value : moment();\r\n                                            setEndDate(valueToSet);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* <DownloadButton title='Download PDF' type='primary' className='reports-download-btn' /> */}\r\n\r\n                            <div className='reports-cards-container bold totals-grid-container'>\r\n                                <Row gutter={16}>\r\n                                    <Col span={6} className='reports-cards-col'>\r\n                                        <Card>\r\n                                            <label className='reports-card-label'>Total Revenue</label>\r\n                                            <div className='reports-card-value'>{formatNumber(calculatedProfitByDateRange.toFixed(2))}</div>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    <Col span={6} className='reports-cards-col'>\r\n                                        <Card>\r\n                                            <label className='reports-card-label'>Total Expense</label>\r\n                                            <div className='reports-card-value'>{formatNumber(calculatedExpensesByDateRange.toFixed(2))}</div>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    <Col span={6} className='reports-cards-col'>\r\n                                        <Card>\r\n                                            <label className='reports-card-label'>Total Profit</label>\r\n                                            <div className='reports-card-value'>{formatNumber((calculatedProfitByDateRange - calculatedExpensesByDateRange).toFixed(2))}</div>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    <Col span={6} className='reports-cards-col'>\r\n                                        <Card>\r\n                                            <label className='reports-card-label'>Units Sold</label>\r\n                                            <div className='reports-card-value'>{formatNumber(calculateUnitsSoldByDateRange(sales, startDateUnix, endDateUnix))}</div>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n\r\n                            <div className='reports-cards-container'>\r\n                                <Card className='profit-expense-card' bordered={false}>\r\n                                    <div className='profit-expenses-chart-container'>\r\n                                        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                                            <BarChart\r\n                                                width={500}\r\n                                                height={300}\r\n                                                data={monthlyProfitExpensesByDateRange}\r\n                                                margin={{\r\n                                                    top: 5,\r\n                                                    right: 30,\r\n                                                    left: 20,\r\n                                                    bottom: 5,\r\n                                                }}\r\n                                            >\r\n                                                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                                <XAxis dataKey=\"dateName\" />\r\n                                                <YAxis />\r\n                                                <Tooltip />\r\n                                                <Legend />\r\n                                                <Bar dataKey=\"profit\" fill=\"#82ca9d\" />\r\n                                                <Bar dataKey=\"expenses\" fill=\"#CA82AF\" />\r\n                                            </BarChart>\r\n                                        </ResponsiveContainer>\r\n                                    </div>\r\n                                </Card>\r\n                            </div>\r\n\r\n                            <div className='reports-cards-container'>\r\n                                <Card className='top-products-card' bordered={false}>\r\n                                    <h2 className='report-table-title'>Top Selling Products</h2>\r\n                                    <Table\r\n                                        bordered\r\n                                        dataSource={topSellingProductsByDateRange}\r\n                                        rowKey={(entry) => (`${entry.product.id}`)}\r\n                                        pagination={false}\r\n                                        columns={[\r\n                                            {\r\n                                                title: 'Product Name',\r\n                                                dataIndex: ['product', 'name'],\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a.product, b.product, 'name');\r\n                                                }\r\n                                            }, {\r\n                                                title: 'Categories',\r\n                                                dataIndex: ['product', 'categories'],\r\n                                                render: (value) => {\r\n                                                    return _.map(value, category => {\r\n                                                        return <Tag key={category}>{category}</Tag>\r\n                                                    })\r\n                                                },\r\n                                                className: 'no-800'\r\n                                            }, {\r\n                                                title: 'Sold',\r\n                                                dataIndex: 'quantitySold',\r\n                                                render: (value) => (`x ${formatNumber(value)}`),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'quantitySold')\r\n                                                }\r\n                                            }, {\r\n                                                title: 'Revenue',\r\n                                                dataIndex: 'revenue',\r\n                                                render: (value) => (<p className='align-right'>{formatNumber(value.toFixed(2))}</p>),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'revenue')\r\n                                                }\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n\r\n                            <div className='reports-cards-container'>\r\n                                <Card className='top-categories-card' bordered={false}>\r\n                                    <h2 className='report-table-title'>Top Selling Categories</h2>\r\n                                    <Table\r\n                                        bordered\r\n                                        dataSource={topSellingCategoriesByDateRange}\r\n                                        rowKey='category'\r\n                                        pagination={false}\r\n                                        columns={[\r\n                                            {\r\n                                                title: 'Category',\r\n                                                dataIndex: 'category',\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'category')\r\n                                                }\r\n                                            }, {\r\n                                                title: 'Sold Products',\r\n                                                dataIndex: 'quantitySold',\r\n                                                render: (value) => (`x ${formatNumber(value)}`),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'quantitySold')\r\n                                                }\r\n                                            }, {\r\n                                                title: 'Revenue',\r\n                                                dataIndex: 'revenue',\r\n                                                render: (value) => (<p className='align-right'>{formatNumber(value.toFixed(2))}</p>),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'revenue')\r\n                                                }\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n\r\n                            <div className='reports-cards-container'>\r\n                                <Card className='top-customers-card' bordered={false}>\r\n                                    <h2 className='report-table-title'>Top Customers</h2>\r\n                                    <Table\r\n                                        bordered\r\n                                        dataSource={topCustomersByDateRange}\r\n                                        rowKey={(entry) => (`${entry.customer.id}`)}\r\n                                        pagination={false}\r\n                                        expandable={topCustomersExpandableConfig}\r\n                                        columns={[\r\n                                            {\r\n                                                title: 'Customer',\r\n                                                dataIndex: ['customer', 'name'],\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'customer')\r\n                                                },\r\n                                            }, {\r\n                                                title: 'Tran sactions',\r\n                                                dataIndex: 'transactions',\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'transactions')\r\n                                                },\r\n                                                className: 'no-655'\r\n                                            }, {\r\n                                                title: 'Units Bought',\r\n                                                dataIndex: 'units',\r\n                                                render: (value) => (`x ${formatNumber(value)}`),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'units')\r\n                                                },\r\n                                                className: 'no-655'\r\n                                            }, {\r\n                                                title: 'Revenue',\r\n                                                dataIndex: 'revenue',\r\n                                                render: (value) => (<p className='align-right'>{formatNumber(value.toFixed(2))}</p>),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'revenue')\r\n                                                },\r\n                                            }, {\r\n                                                title: 'Profit',\r\n                                                dataIndex: 'profit',\r\n                                                render: (value) => (<p className='align-right'>{formatNumber(value.toFixed(2))}</p>),\r\n                                                sorter: (a, b) => {\r\n                                                    return sortByProperty(a, b, 'profit')\r\n                                                },\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                }}\r\n            </userContext.Consumer>\r\n        </div>\r\n    );\r\n}\r\nexport default withWindowDimension(Reports);","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { MailOutlined } from '@ant-design/icons';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nimport { CURRENT_USER_QUERY } from './App';\r\n\r\nconst REQUEST_RESET_MUTATION = gql`\r\n  mutation REQUEST_RESET_MUTATION($email: String!) {\r\n    requestReset(email: $email) {\r\n        id\r\n    }\r\n  }\r\n`;\r\n\r\nconst RequestResetPassword = () => {\r\n    const [email, setEmail] = React.useState<string>();\r\n    const [resultMessage, setResultMessage] = React.useState<string>();\r\n\r\n    const [requestReset, { loading }] = useMutation(REQUEST_RESET_MUTATION, {\r\n        variables: { email },\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n    return (\r\n        <div className='retain-margin'>\r\n            {resultMessage ? <p>{resultMessage}</p> :\r\n                <>\r\n                    <h2>Request a password reset</h2>\r\n                    <Form\r\n                        initialValues={{ remember: true }}\r\n                        onFinish={async () => {\r\n                            await requestReset()\r\n                                .then(() => {\r\n                                    setResultMessage('Successfully sent! Please check your email for a reset link - THIS LINK WILL EXPIRE IN ONE HOUR.');\r\n                                })\r\n                                .catch(res => {\r\n                                    _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                                });\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"email\"\r\n                            rules={[{ required: true, message: 'Please input your email' }]}\r\n                        >\r\n                            <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} placeholder=\"E-mail\" onChange={(e) => setEmail(e.target.value)} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button disabled={loading} loading={loading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">{loading ? \"Sending request\" : \"Reset\"}</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default RequestResetPassword;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { LockOutlined } from '@ant-design/icons';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { CURRENT_USER_QUERY } from './App';\r\n\r\nconst RESET_MUTATION = gql`\r\n  mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\r\n    resetPassword(resetToken: $resetToken, password: $password, confirmPassword: $confirmPassword) {\r\n        id\r\n        email\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\nconst ResetPassword = (props: any) => {\r\n    const history = useHistory();  // FIXME pass this down as react context!\r\n    const [newPassword, setNewPassword] = React.useState<string>();\r\n    const [confirmPassword, setConfirmPassword] = React.useState<string>();\r\n    const [resultMessage, setResultMessage] = React.useState<string>();\r\n    const params = new URLSearchParams(props.location.search);\r\n    const resetToken = params.get('resetToken');\r\n\r\n    if (!resetToken) {\r\n        history.push('/requestResetPassword');\r\n    }\r\n\r\n    const [resetPassword, { loading }] = useMutation(RESET_MUTATION, {\r\n        variables: { resetToken, password: newPassword, confirmPassword },\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {resultMessage ? <p>{resultMessage}</p> :\r\n                <>\r\n                    <h2>Enter your new password:</h2>\r\n                    <Form\r\n                        initialValues={{ remember: true }}\r\n                        onFinish={async () => {\r\n                            if (newPassword !== confirmPassword) {\r\n                                message.error('Passwords did not match');\r\n                            } else {\r\n                                await resetPassword()\r\n                                    .then(() => {\r\n                                        setResultMessage('Password successfully changed! Redirecting...');\r\n                                        setTimeout(() => {\r\n                                            history.push('/');\r\n                                        }, 3000);\r\n                                    })\r\n                                    .catch(res => {\r\n                                        _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                                    });\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"newPassword\"\r\n                            rules={[{ required: true, message: 'Please input your new password' }]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"New Password\"\r\n                                onChange={(e) => setNewPassword(e.target.value)}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"confirmPassword\"\r\n                            rules={[{ required: true, message: 'Please confirm your new password' }]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"Confirm New Password\"\r\n                                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button disabled={loading} loading={loading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">{loading ? \"Processing\" : \"Reset\"}</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}\r\nexport default ResetPassword;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { message } from 'antd';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { CURRENT_USER_QUERY } from './App';\r\n\r\nconst CONFIRM_MUTATION = gql`\r\n  mutation CONFIRM_MUTATION($confirmEmailToken: String!) {\r\n    confirmEmail(confirmEmailToken: $confirmEmailToken) {\r\n        id\r\n        email\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\nconst ResetPassword = (props: any) => {\r\n    const history = useHistory();  // FIXME pass this down as react context!\r\n    const params = new URLSearchParams(props.location.search);\r\n    const confirmEmailToken = params.get('confirmEmailToken');\r\n\r\n    const [resultMessage, setResultMessage] = React.useState<string>('Confirming email, please wait...');\r\n\r\n    const [confirmEmail] = useMutation(CONFIRM_MUTATION, {\r\n        variables: { confirmEmailToken },\r\n        refetchQueries: [{ query: CURRENT_USER_QUERY }]\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        const runConfirmEmailMutation = async () => {\r\n            if (!confirmEmailToken) {\r\n                setResultMessage('Confirmation token not found! Please make sure to navigate to this page by clicking on the link that was sent to your email.');\r\n            } else {\r\n                await confirmEmail()\r\n                    .then(() => {\r\n                        setResultMessage('Email successfully verified! Redirecting...');\r\n                        setTimeout(() => {\r\n                            history.push('/products');\r\n                        }, 3000);\r\n                    })\r\n                    .catch(res => {\r\n                        _.forEach(res.graphQLErrors, error => message.error(error.message));\r\n                    });\r\n            }\r\n        }\r\n        runConfirmEmailMutation();\r\n    }, [confirmEmailToken, confirmEmail, history]);\r\n\r\n    return (\r\n        <h2>{resultMessage}</h2>\r\n    );\r\n}\r\nexport default ResetPassword;","import React from 'react';\r\nconst { ReactTypeformEmbed } = require('react-typeform-embed');\r\n\r\nconst FeatureBug = () => {\r\n    return (\r\n        <>\r\n            <ReactTypeformEmbed\r\n                url=\"https://h17g64wdv18.typeform.com/to/Ss9dqZJu\"\r\n                hideHeaders={true}\r\n                opacity={0}\r\n                style={{ top: '100px' }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FeatureBug;","import React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nconst CustomSpin = () => (\r\n    <div style={{ 'textAlign': 'center', 'marginTop': '35px' }}>\r\n        <Spin tip='Loading...' size='large' />\r\n    </div>\r\n);\r\nexport default CustomSpin;","import React from 'react';\r\nimport { Switch, Route } from 'react-router';\r\nimport { withRouter } from 'react-router';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport Header from './Header';\r\nimport SignUp from './SignUp';\r\nimport Login from './Login';\r\nimport Products from './Products';\r\nimport Inventories from './Inventories';\r\n//import Inventory from './Inventory';\r\nimport Customers from './Customers';\r\nimport Sales from './Sales';\r\nimport Expenses from './Expenses';\r\nimport Reports from './Reports';\r\nimport RequestResetPassword from './RequestResetPassword';\r\nimport ResetPassword from './ResetPassword';\r\nimport ConfirmEmail from './ConfirmEmail';\r\nimport FeatureBug from './FeatureBug';\r\nimport CustomSpin from './CustomSpin';\r\n\r\nconst CURRENT_USER_QUERY = gql`\r\n  {\r\n    me {\r\n      id\r\n      email\r\n      verified\r\n      permissions\r\n      name\r\n    }\r\n}\r\n`;\r\n\r\nconst Page404 = () => (\r\n  <p>Page not found.</p>\r\n);\r\n\r\nconst userContext = React.createContext({ \r\n    id: '',\r\n    email: '',\r\n    verified: false,\r\n    permissions: []\r\n});\r\n\r\nfunction App() {\r\n  const { data, loading } = useQuery(CURRENT_USER_QUERY);\r\n  const user = data ? data.me : null;\r\n\r\n  return (\r\n    <userContext.Provider value={user}>\r\n      <div className='app-wrapper'>\r\n        <div className=\"App\">\r\n          <Header user={user} />\r\n          <div className='page-wrapper'>\r\n            {loading ?\r\n              <CustomSpin /> : \r\n              <Switch>\r\n                <Route exact path=\"/\" component={Reports} />\r\n                <Route exact path=\"/signup\" component={SignUp} />\r\n                <Route exact path=\"/login\" component={Login} />\r\n                <Route exact path=\"/products\" component={Products} />\r\n                <Route exact path=\"/inventories\" component={Inventories} />\r\n                {/*<Route exact path=\"/inventory\" component={Inventory} />*/}\r\n                <Route exact path=\"/customers\" component={Customers} />\r\n                <Route exact path=\"/expenses\" component={Expenses} />\r\n                <Route exact path=\"/sales\" component={Sales} />\r\n                <Route exact path=\"/requestResetPassword\" component={RequestResetPassword} />\r\n                <Route exact path=\"/resetPassword\" component={ResetPassword} />\r\n                <Route exact path=\"/confirmEmail\" component={ConfirmEmail} />\r\n                <Route exact path=\"/typeform\" component={FeatureBug} />\r\n                <Route component={Page404} />\r\n              </Switch>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </userContext.Provider>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\nexport { userContext };\r\nexport { CURRENT_USER_QUERY };","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink  } from 'apollo-link-http';\r\n\r\nconst serverURL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\r\n\r\nconsole.log(process.env.NODE_ENV)\r\nconsole.log(serverURL)\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: serverURL,\r\n  credentials: 'include'\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache({\r\n    addTypename: false\r\n  })\r\n});\r\n\r\nReactGA.initialize('UA-89939726-8');\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ApolloProvider client={client}>\r\n      <div>\r\n        <App />\r\n      </div>\r\n    </ApolloProvider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}